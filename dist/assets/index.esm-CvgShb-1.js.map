{"version":3,"file":"index.esm-CvgShb-1.js","sources":["../../node_modules/react-otp-input/lib/index.esm.js"],"sourcesContent":["import React from 'react';\n\nvar isStyleObject = function (obj) { return typeof obj === 'object' && obj !== null; };\nvar OTPInput = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? '' : _b, _c = _a.numInputs, numInputs = _c === void 0 ? 4 : _c, onChange = _a.onChange, onPaste = _a.onPaste, renderInput = _a.renderInput, _d = _a.shouldAutoFocus, shouldAutoFocus = _d === void 0 ? false : _d, _e = _a.inputType, inputType = _e === void 0 ? 'text' : _e, renderSeparator = _a.renderSeparator, placeholder = _a.placeholder, containerStyle = _a.containerStyle, inputStyle = _a.inputStyle, _f = _a.skipDefaultStyles, skipDefaultStyles = _f === void 0 ? false : _f;\n    var _g = React.useState(0), activeInput = _g[0], setActiveInput = _g[1];\n    var inputRefs = React.useRef([]);\n    var getOTPValue = function () { return (value ? value.toString().split('') : []); };\n    var isInputNum = inputType === 'number' || inputType === 'tel';\n    React.useEffect(function () {\n        inputRefs.current = inputRefs.current.slice(0, numInputs);\n    }, [numInputs]);\n    React.useEffect(function () {\n        var _a;\n        if (shouldAutoFocus) {\n            (_a = inputRefs.current[0]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }, [shouldAutoFocus]);\n    var getPlaceholderValue = function () {\n        if (typeof placeholder === 'string') {\n            if (placeholder.length === numInputs) {\n                return placeholder;\n            }\n            if (placeholder.length > 0) {\n                console.error('Length of the placeholder should be equal to the number of inputs.');\n            }\n        }\n        return undefined;\n    };\n    var isInputValueValid = function (value) {\n        var isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n        return isTypeValid && value.trim().length === 1;\n    };\n    var handleChange = function (event) {\n        var value = event.target.value;\n        if (isInputValueValid(value)) {\n            changeCodeAtFocus(value);\n            focusInput(activeInput + 1);\n        }\n    };\n    var handleInputChange = function (event) {\n        var nativeEvent = event.nativeEvent;\n        var value = event.target.value;\n        if (!isInputValueValid(value)) {\n            // Pasting from the native autofill suggestion on a mobile device can pass\n            // the pasted string as one long input to one of the cells. This ensures\n            // that we handle the full input and not just the first character.\n            if (value.length === numInputs) {\n                var hasInvalidInput = value.split('').some(function (cellInput) { return !isInputValueValid(cellInput); });\n                if (!hasInvalidInput) {\n                    handleOTPChange(value.split(''));\n                    focusInput(numInputs - 1);\n                }\n            }\n            // @ts-expect-error - This was added previously to handle and edge case\n            // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n            // still needed.\n            if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n                event.preventDefault();\n                changeCodeAtFocus('');\n                focusInput(activeInput - 1);\n            }\n            // Clear the input if it's not valid value because firefox allows\n            // pasting non-numeric characters in a number type input\n            event.target.value = '';\n        }\n    };\n    var handleFocus = function (event) { return function (index) {\n        setActiveInput(index);\n        event.target.select();\n    }; };\n    var handleBlur = function () {\n        setActiveInput(activeInput - 1);\n    };\n    var handleKeyDown = function (event) {\n        var otp = getOTPValue();\n        if ([event.code, event.key].includes('Backspace')) {\n            event.preventDefault();\n            changeCodeAtFocus('');\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'Delete') {\n            event.preventDefault();\n            changeCodeAtFocus('');\n        }\n        else if (event.code === 'ArrowLeft') {\n            event.preventDefault();\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'ArrowRight') {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        // React does not trigger onChange when the same value is entered\n        // again. So we need to focus the next input manually in this case.\n        else if (event.key === otp[activeInput]) {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        else if (event.code === 'Spacebar' ||\n            event.code === 'Space' ||\n            event.code === 'ArrowUp' ||\n            event.code === 'ArrowDown') {\n            event.preventDefault();\n        }\n    };\n    var focusInput = function (index) {\n        var _a, _b;\n        var activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n        if (inputRefs.current[activeInput]) {\n            (_a = inputRefs.current[activeInput]) === null || _a === void 0 ? void 0 : _a.focus();\n            (_b = inputRefs.current[activeInput]) === null || _b === void 0 ? void 0 : _b.select();\n            setActiveInput(activeInput);\n        }\n    };\n    var changeCodeAtFocus = function (value) {\n        var otp = getOTPValue();\n        otp[activeInput] = value[0];\n        handleOTPChange(otp);\n    };\n    var handleOTPChange = function (otp) {\n        var otpValue = otp.join('');\n        onChange(otpValue);\n    };\n    var handlePaste = function (event) {\n        var _a;\n        event.preventDefault();\n        var otp = getOTPValue();\n        var nextActiveInput = activeInput;\n        // Get pastedData in an array of max size (num of inputs - current position)\n        var pastedData = event.clipboardData\n            .getData('text/plain')\n            .slice(0, numInputs - activeInput)\n            .split('');\n        // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n        if (isInputNum && pastedData.some(function (value) { return isNaN(Number(value)); })) {\n            return;\n        }\n        // Paste data from focused input onwards\n        for (var pos = 0; pos < numInputs; ++pos) {\n            if (pos >= activeInput && pastedData.length > 0) {\n                otp[pos] = (_a = pastedData.shift()) !== null && _a !== void 0 ? _a : '';\n                nextActiveInput++;\n            }\n        }\n        focusInput(nextActiveInput);\n        handleOTPChange(otp);\n    };\n    return (React.createElement(\"div\", { style: Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle), className: typeof containerStyle === 'string' ? containerStyle : undefined, onPaste: onPaste }, Array.from({ length: numInputs }, function (_, index) { return index; }).map(function (index) {\n        var _a, _b, _c;\n        return (React.createElement(React.Fragment, { key: index },\n            renderInput({\n                value: (_a = getOTPValue()[index]) !== null && _a !== void 0 ? _a : '',\n                placeholder: (_c = (_b = getPlaceholderValue()) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : undefined,\n                ref: function (element) { return (inputRefs.current[index] = element); },\n                onChange: handleChange,\n                onFocus: function (event) { return handleFocus(event)(index); },\n                onBlur: handleBlur,\n                onKeyDown: handleKeyDown,\n                onPaste: handlePaste,\n                autoComplete: 'off',\n                'aria-label': \"Please enter OTP character \".concat(index + 1),\n                style: Object.assign(!skipDefaultStyles ? { width: '1em', textAlign: 'center' } : {}, isStyleObject(inputStyle) ? inputStyle : {}),\n                className: typeof inputStyle === 'string' ? inputStyle : undefined,\n                type: inputType,\n                inputMode: isInputNum ? 'numeric' : 'text',\n                onInput: handleInputChange,\n            }, index),\n            index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)));\n    })));\n};\n\nexport { OTPInput as default };\n//# sourceMappingURL=index.esm.js.map\n"],"names":["React","importShared","isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","activeInput","setActiveInput","inputRefs","getOTPValue","isInputNum","getPlaceholderValue","isInputValueValid","isTypeValid","handleChange","event","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","hasInvalidInput","cellInput","handleOTPChange","handleFocus","index","handleBlur","handleKeyDown","otp","otpValue","handlePaste","nextActiveInput","pastedData","pos","_","element"],"mappings":"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","x_google_ignoreList":[0]}