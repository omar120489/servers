{"version":3,"file":"AuthResetPassword-Stu1o0jo.js","sources":["../../src/views/pages/authentication/supabase/AuthResetPassword.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport FormControl from '@mui/material/FormControl';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// third party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project imports\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport CustomFormControl from 'ui-component/extended/Form/CustomFormControl';\nimport { strengthColor, strengthIndicator } from 'utils/password-strength';\n\nimport { dispatch } from 'store';\nimport { openSnackbar } from 'store/slices/snackbar';\n\n// assets\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\n// ========================|| SUPABASE - RESET PASSWORD ||======================== //\n\nexport default function AuthResetPassword({ ...others }) {\n  const navigate = useNavigate();\n  const scriptedRef = useScriptRef();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [strength, setStrength] = useState(0);\n  const [level, setLevel] = useState();\n\n  const { isLoggedIn } = useAuth();\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const changePassword = (value) => {\n    const temp = strengthIndicator(value);\n    setStrength(temp);\n    setLevel(strengthColor(temp));\n  };\n\n  useEffect(() => {\n    changePassword('');\n  }, []);\n\n  const [searchParams] = useSearchParams();\n  const authParam = searchParams.get('auth');\n\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirmPassword: '',\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        password: Yup.string().max(255).required('Password is required'),\n        confirmPassword: Yup.string()\n          .required('Confirm Password is required')\n          .test(\n            'confirmPassword',\n            'Both Password must be match!',\n            (confirmPassword, yup) => yup.parent.password === confirmPassword\n          )\n      })}\n      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n        try {\n          // password reset\n          if (scriptedRef.current) {\n            setStatus({ success: true });\n            setSubmitting(false);\n\n            dispatch(\n              openSnackbar({\n                open: true,\n                message: 'Successfuly reset password.',\n                variant: 'alert',\n                alert: {\n                  color: 'success'\n                },\n                close: false\n              })\n            );\n\n            setTimeout(() => {\n              navigate(\n                isLoggedIn ? '/auth/login' : authParam ? `/login?auth=${authParam}` : '/login',\n                { replace: true }\n              );\n            }, 1500);\n          }\n        } catch (err) {\n          console.error(err);\n          if (scriptedRef.current) {\n            setStatus({ success: false });\n            setErrors({ submit: err.message });\n            setSubmitting(false);\n          }\n        }\n      }}\n    >\n      {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n        <form noValidate onSubmit={handleSubmit} {...others}>\n          <CustomFormControl fullWidth error={Boolean(touched.password && errors.password)}>\n            <InputLabel htmlFor=\"outlined-adornment-password-reset\">Password</InputLabel>\n            <OutlinedInput\n              id=\"outlined-adornment-password-reset\"\n              type={showPassword ? 'text' : 'password'}\n              value={values.password}\n              name=\"password\"\n              onBlur={handleBlur}\n              onChange={(e) => {\n                handleChange(e);\n                changePassword(e.target.value);\n              }}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                    size=\"large\"\n                  >\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\n                  </IconButton>\n                </InputAdornment>\n              }\n            />\n          </CustomFormControl>\n          {touched.password && errors.password && (\n            <FormControl fullWidth>\n              <FormHelperText error id=\"standard-weight-helper-text-reset\">\n                {errors.password}\n              </FormHelperText>\n            </FormControl>\n          )}\n          {strength !== 0 && (\n            <FormControl fullWidth>\n              <Box sx={{ mb: 2 }}>\n                <Grid container spacing={2} sx={{ alignItems: 'center' }}>\n                  <Grid>\n                    <Box\n                      sx={{\n                        width: 85,\n                        height: 8,\n                        borderRadius: '7px',\n                        bgcolor: level?.color\n                      }}\n                    />\n                  </Grid>\n                  <Grid>\n                    <Typography variant=\"subtitle1\" sx={{ fontSize: '0.75rem' }}>\n                      {level?.label}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Box>\n            </FormControl>\n          )}\n\n          <CustomFormControl\n            fullWidth\n            error={Boolean(touched.confirmPassword && errors.confirmPassword)}\n          >\n            <InputLabel htmlFor=\"outlined-adornment-confirm-password\">Confirm Password</InputLabel>\n            <OutlinedInput\n              id=\"outlined-adornment-confirm-password\"\n              type=\"password\"\n              value={values.confirmPassword}\n              name=\"confirmPassword\"\n              label=\"Confirm Password\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n            />\n          </CustomFormControl>\n\n          {touched.confirmPassword && errors.confirmPassword && (\n            <FormControl fullWidth>\n              <FormHelperText error id=\"standard-weight-helper-text-confirm-password\">\n                {' '}\n                {errors.confirmPassword}{' '}\n              </FormHelperText>\n            </FormControl>\n          )}\n\n          {errors.submit && (\n            <Box sx={{ mt: 3 }}>\n              <FormHelperText error>{errors.submit}</FormHelperText>\n            </Box>\n          )}\n          <Box sx={{ mt: 1 }}>\n            <AnimateButton>\n              <Button\n                disableElevation\n                disabled={isSubmitting}\n                fullWidth\n                size=\"large\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"secondary\"\n              >\n                Reset Password\n              </Button>\n            </AnimateButton>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n"],"names":["useEffect","useState","importShared","useNavigate","useSearchParams","AuthResetPassword","others","navigate","scriptedRef","useScriptRef","showPassword","setShowPassword","strength","setStrength","level","setLevel","isLoggedIn","useAuth","handleClickShowPassword","handleMouseDownPassword","event","changePassword","value","temp","strengthIndicator","strengthColor","searchParams","authParam","jsx","Formik","Yup.object","Yup.string","confirmPassword","yup","values","setErrors","setStatus","setSubmitting","dispatch","openSnackbar","err","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","jsxs","CustomFormControl","InputLabel","OutlinedInput","e","InputAdornment","IconButton","Visibility","VisibilityOff","FormControl","FormHelperText","Box","Grid","Typography","AnimateButton","Button"],"mappings":"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"}