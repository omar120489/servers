{"version":3,"mappings":"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","names":["sanitizeFilters","filters","params","key","value","getKpis","apiGet","getFunnel","getTrends","interval","getCohorts","toTrendSeries","points","dates","point","a","b","xAxis","date","seriesMap","values","seriesKey","array","dateIndex","series","data","toFunnelChartData","stages","sorted","stage","toCohortRows","items","item","lazy","Suspense","useCallback","useEffect","useMemo","useRef","useState","importShared","useNavigate","useSearchParams","DEFAULT_FILTERS","DEFAULT_INTERVAL","ANALYTICS_FILTERS_STORAGE_KEY","sanitizeValue","trimmed","parseFilters","getValue","parseInterval","readStoredFilters","raw","parsed","mergeFilters","urlFilters","storedFilters","buildAnalyticsSearchParams","search","buildListSearchParams","overrides","merged","formatDateParam","LineChartLazy","__vitePreload","BarChartLazy","LineChartWithEvents","BarChartWithEvents","KPI_CARD_TEST_IDS","AnalyticsDashboard","searchParams","setSearchParams","navigate","storedFiltersRef","initialFiltersRef","initialIntervalRef","initialFilters","setFilters","appliedFilters","setAppliedFilters","trendInterval","setTrendInterval","state","setState","loading","setLoading","error","setError","isDirty","trendSeries","funnelChart","cohortRows","fetchAnalytics","activeFilters","kpis","funnel","trends","cohorts","err","dateFrom","dateTo","source","ownerId","dateFormatter","numberFormatter","formatTooltipLabel","formatTooltipValue","lineChartSlotProps","barChartSlotProps","chartFallback","jsx","Box","CircularProgress","handleInputChange","normalized","prev","handleApply","handleReset","nextFilters","handleIntervalChange","event","nextInterval","buildListParams","patch","navigateToList","target","query","determineTargetFromSeriesId","seriesId","handleTrendPointClick","dataIndex","day","handleLeadsCreatedClick","handleDealsCreatedClick","renderKpiValue","formatter","MainCard","jsxs","Stack","TextField","MenuItem","DEAL_STAGES","Button","Alert","Grid","Fragment","Card","CardActionArea","CardContent","Typography","Divider","_event","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","row"],"ignoreList":[],"sources":["../../src/services/reporting.ts","../../src/views/pages/analytics/transformers.ts","../../src/views/pages/analytics/AnalyticsDashboard.tsx"],"sourcesContent":["import { apiGet } from 'utils/axios';\nimport type {\n  AnalyticsFilters,\n  CohortItem,\n  FunnelStage,\n  KpiSummary,\n  TimeSeriesPoint\n} from 'types/metrics';\n\nexport type TrendInterval = 'day' | 'week' | 'month';\nexport type CohortInterval = 'month' | 'quarter';\n\nfunction sanitizeFilters(filters: AnalyticsFilters): Record<string, string> {\n  const params: Record<string, string> = {};\n\n  (Object.entries(filters) as [keyof AnalyticsFilters, string | null | undefined][]).forEach(\n    ([key, value]) => {\n      if (value !== null && value !== undefined && value !== '') {\n        params[key] = value;\n      }\n    }\n  );\n\n  return params;\n}\n\nexport async function getKpis(filters: AnalyticsFilters): Promise<KpiSummary> {\n  return apiGet<KpiSummary>('/api/reporting/kpis', {\n    params: sanitizeFilters(filters)\n  });\n}\n\nexport async function getFunnel(filters: AnalyticsFilters): Promise<FunnelStage[]> {\n  return apiGet<FunnelStage[]>('/api/reporting/funnel', {\n    params: sanitizeFilters(filters)\n  });\n}\n\nexport async function getTrends(\n  filters: AnalyticsFilters,\n  interval: TrendInterval = 'day'\n): Promise<TimeSeriesPoint[]> {\n  return apiGet<TimeSeriesPoint[]>('/api/reporting/trends', {\n    params: {\n      ...sanitizeFilters(filters),\n      interval\n    }\n  });\n}\n\nexport async function getCohorts(\n  filters: AnalyticsFilters,\n  interval: CohortInterval = 'month'\n): Promise<CohortItem[]> {\n  return apiGet<CohortItem[]>('/api/reporting/cohorts', {\n    params: {\n      ...sanitizeFilters(filters),\n      interval\n    }\n  });\n}\n","import type { CohortItem, FunnelStage, TimeSeriesPoint } from 'types/metrics';\n\nexport type TrendInterval = 'day' | 'week' | 'month';\n\nexport interface TrendSeries {\n  xAxis: Date[];\n  series: Array<{\n    id: string;\n    label: string;\n    data: (number | null)[];\n    connectNulls?: boolean;\n  }>;\n}\n\nexport interface FunnelChartData {\n  categories: string[];\n  counts: number[];\n  conversionRates: number[];\n}\n\nexport interface CohortRow {\n  cohortKey: string;\n  total: number;\n  converted: number;\n  conversionRate: number;\n}\n\nexport function toTrendSeries(points: TimeSeriesPoint[]): TrendSeries {\n  if (points.length === 0) {\n    return {\n      xAxis: [],\n      series: []\n    };\n  }\n\n  const dates = Array.from(new Set(points.map((point) => point.date))).sort(\n    (a, b) => new Date(a).getTime() - new Date(b).getTime()\n  );\n  const xAxis = dates.map((date) => new Date(date));\n\n  const seriesMap = new Map<string, (number | null)[]>();\n  dates.forEach(() => {\n    seriesMap.forEach((values, key) => {\n      values.push(null);\n      seriesMap.set(key, values);\n    });\n  });\n\n  points.forEach((point) => {\n    const seriesKey = point.seriesKey ?? 'default';\n    if (!seriesMap.has(seriesKey)) {\n      seriesMap.set(seriesKey, Array(dates.length).fill(null));\n    }\n    const array = seriesMap.get(seriesKey)!;\n    const dateIndex = dates.indexOf(point.date);\n    if (dateIndex >= 0) {\n      array[dateIndex] = point.value;\n    }\n  });\n\n  const series = Array.from(seriesMap.entries()).map(([key, data]) => ({\n    id: key,\n    label: key === 'default' ? 'Value' : key,\n    data,\n    connectNulls: true\n  }));\n\n  return {\n    xAxis,\n    series\n  };\n}\n\nexport function toFunnelChartData(stages: FunnelStage[]): FunnelChartData {\n  if (stages.length === 0) {\n    return {\n      categories: [],\n      counts: [],\n      conversionRates: []\n    };\n  }\n\n  const sorted = [...stages].sort((a, b) => b.count - a.count);\n\n  return {\n    categories: sorted.map((stage) => stage.name),\n    counts: sorted.map((stage) => stage.count),\n    conversionRates: sorted.map((stage) => stage.conversionRate)\n  };\n}\n\nexport function toCohortRows(items: CohortItem[]): CohortRow[] {\n  if (items.length === 0) {\n    return [];\n  }\n\n  return [...items]\n    .sort((a, b) => a.cohortKey.localeCompare(b.cohortKey))\n    .map((item) => ({\n      cohortKey: item.cohortKey,\n      total: item.total,\n      converted: item.converted,\n      conversionRate: item.conversionRate\n    }));\n}\n","import {\n  lazy,\n  Suspense,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ComponentType\n} from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\n\nimport Alert from '@mui/material/Alert';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardActionArea from '@mui/material/CardActionArea';\nimport CardContent from '@mui/material/CardContent';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Divider from '@mui/material/Divider';\nimport Grid from '@mui/material/GridLegacy';\nimport MenuItem from '@mui/material/MenuItem';\nimport Paper from '@mui/material/Paper';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport type { BarChartProps } from '@mui/x-charts/BarChart';\nimport type { LineChartProps } from '@mui/x-charts/LineChart';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport { DEAL_STAGES } from 'constants/deals';\nimport type {\n  AnalyticsFilters,\n  CohortItem,\n  FunnelStage,\n  KpiSummary,\n  TimeSeriesPoint\n} from 'types/metrics';\nimport { getCohorts, getFunnel, getKpis, getTrends, type TrendInterval } from 'services/reporting';\nimport { toCohortRows, toFunnelChartData, toTrendSeries } from './transformers';\n\nconst DEFAULT_FILTERS: AnalyticsFilters = {\n  dateFrom: null,\n  dateTo: null,\n  source: null,\n  ownerId: null,\n  stage: null\n};\n\nconst DEFAULT_INTERVAL: TrendInterval = 'day';\n\nconst ANALYTICS_FILTERS_STORAGE_KEY = 'analytics.filters';\n\ninterface AsyncState {\n  kpis: KpiSummary | null;\n  funnel: FunnelStage[];\n  trends: TimeSeriesPoint[];\n  cohorts: CohortItem[];\n}\n\nfunction sanitizeValue(value: unknown): string | null {\n  if (typeof value !== 'string') {\n    return null;\n  }\n  const trimmed = value.trim();\n  return trimmed.length > 0 ? trimmed : null;\n}\n\nfunction parseFilters(params: URLSearchParams): AnalyticsFilters {\n  const getValue = (key: string): string | null => sanitizeValue(params.get(key));\n\n  return {\n    dateFrom: getValue('dateFrom'),\n    dateTo: getValue('dateTo'),\n    source: getValue('source'),\n    ownerId: getValue('ownerId'),\n    stage: getValue('stage')\n  };\n}\n\nfunction parseInterval(params: URLSearchParams): TrendInterval {\n  const interval = params.get('interval');\n  if (interval === 'week' || interval === 'month') {\n    return interval;\n  }\n  return DEFAULT_INTERVAL;\n}\n\nfunction readStoredFilters(): AnalyticsFilters | null {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  try {\n    const raw = window.localStorage.getItem(ANALYTICS_FILTERS_STORAGE_KEY);\n    if (!raw) {\n      return null;\n    }\n    const parsed = JSON.parse(raw) as Partial<Record<keyof AnalyticsFilters, unknown>>;\n    return {\n      dateFrom: sanitizeValue(parsed.dateFrom),\n      dateTo: sanitizeValue(parsed.dateTo),\n      source: sanitizeValue(parsed.source),\n      ownerId: sanitizeValue(parsed.ownerId),\n      stage: sanitizeValue(parsed.stage)\n    };\n  } catch {\n    return null;\n  }\n}\n\nfunction mergeFilters(\n  urlFilters: AnalyticsFilters,\n  storedFilters: AnalyticsFilters | null\n): AnalyticsFilters {\n  if (!storedFilters) {\n    return urlFilters;\n  }\n\n  return {\n    dateFrom: urlFilters.dateFrom ?? storedFilters.dateFrom ?? null,\n    dateTo: urlFilters.dateTo ?? storedFilters.dateTo ?? null,\n    source: urlFilters.source ?? storedFilters.source ?? null,\n    ownerId: urlFilters.ownerId ?? storedFilters.ownerId ?? null,\n    stage: urlFilters.stage ?? storedFilters.stage ?? null\n  };\n}\n\nfunction buildAnalyticsSearchParams(filters: AnalyticsFilters, interval: TrendInterval) {\n  const search = new URLSearchParams();\n  (Object.entries(filters) as [keyof AnalyticsFilters, string | null][]).forEach(([key, value]) => {\n    if (value) {\n      search.set(key, value);\n    }\n  });\n  search.set('interval', interval);\n  return search;\n}\n\nfunction buildListSearchParams(\n  filters: AnalyticsFilters,\n  overrides: Partial<AnalyticsFilters> = {}\n) {\n  const merged: AnalyticsFilters = {\n    ...filters,\n    ...overrides\n  };\n\n  const search = new URLSearchParams();\n\n  if (merged.dateFrom) {\n    search.set('dateFrom', merged.dateFrom);\n  }\n\n  if (merged.dateTo) {\n    search.set('dateTo', merged.dateTo);\n  }\n\n  if (merged.stage) {\n    search.set('stage', merged.stage);\n  }\n\n  if (merged.ownerId) {\n    search.set('ownerId', merged.ownerId);\n  }\n\n  if (merged.source) {\n    search.set('search', merged.source);\n  }\n\n  return search;\n}\n\nfunction formatDateParam(date: Date): string {\n  return date.toISOString().slice(0, 10);\n}\n\ntype ChartItemEvent = (\n  event: unknown,\n  item: { dataIndex?: number; seriesId?: string | number }\n) => void;\n\ntype LineChartWithEventsProps = LineChartProps & {\n  onItemClick?: ChartItemEvent;\n};\n\ntype BarChartWithEventsProps = BarChartProps & {\n  onItemClick?: ChartItemEvent;\n};\n\nconst LineChartLazy = lazy(async () => {\n  const module = await import('@mui/x-charts/LineChart');\n  return { default: module.LineChart };\n});\n\nconst BarChartLazy = lazy(async () => {\n  const module = await import('@mui/x-charts/BarChart');\n  return { default: module.BarChart };\n});\n\nconst LineChartWithEvents = LineChartLazy as unknown as ComponentType<LineChartWithEventsProps>;\nconst BarChartWithEvents = BarChartLazy as unknown as ComponentType<BarChartWithEventsProps>;\n\nconst KPI_CARD_TEST_IDS = {\n  leadsCreated: 'kpi-leads-created',\n  dealsCreated: 'kpi-deals-created',\n  dealsWon: 'kpi-deals-won'\n} as const;\n\nexport default function AnalyticsDashboard() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const storedFiltersRef = useRef<AnalyticsFilters | null | undefined>(undefined);\n  if (storedFiltersRef.current === undefined) {\n    storedFiltersRef.current = readStoredFilters();\n  }\n\n  const initialFiltersRef = useRef<AnalyticsFilters | null>(null);\n  if (initialFiltersRef.current === null) {\n    initialFiltersRef.current = mergeFilters(\n      parseFilters(searchParams),\n      storedFiltersRef.current ?? null\n    );\n  }\n\n  const initialIntervalRef = useRef<TrendInterval>(parseInterval(searchParams));\n  const initialFilters = initialFiltersRef.current ?? DEFAULT_FILTERS;\n\n  const [filters, setFilters] = useState<AnalyticsFilters>(initialFilters);\n  const [appliedFilters, setAppliedFilters] = useState<AnalyticsFilters>(initialFilters);\n  const [trendInterval, setTrendInterval] = useState<TrendInterval>(initialIntervalRef.current);\n\n  const [state, setState] = useState<AsyncState>({\n    kpis: null,\n    funnel: [],\n    trends: [],\n    cohorts: []\n  });\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const isDirty = useMemo(\n    () => JSON.stringify(filters) !== JSON.stringify(appliedFilters),\n    [filters, appliedFilters]\n  );\n\n  const trendSeries = useMemo(() => toTrendSeries(state.trends), [state.trends]);\n  const funnelChart = useMemo(() => toFunnelChartData(state.funnel), [state.funnel]);\n  const cohortRows = useMemo(() => toCohortRows(state.cohorts), [state.cohorts]);\n\n  const fetchAnalytics = useCallback(\n    async (activeFilters: AnalyticsFilters, interval: TrendInterval) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const [kpis, funnel, trends, cohorts] = await Promise.all([\n          getKpis(activeFilters),\n          getFunnel(activeFilters),\n          getTrends(activeFilters, interval),\n          getCohorts(activeFilters)\n        ]);\n        setState({\n          kpis,\n          funnel,\n          trends,\n          cohorts\n        });\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unable to load analytics data.');\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    void fetchAnalytics(appliedFilters, trendInterval);\n  }, [appliedFilters, trendInterval, fetchAnalytics]);\n\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const { dateFrom, dateTo, source, ownerId, stage } = appliedFilters;\n    if (!dateFrom && !dateTo && !source && !ownerId && !stage) {\n      window.localStorage.removeItem(ANALYTICS_FILTERS_STORAGE_KEY);\n      return;\n    }\n\n    window.localStorage.setItem(ANALYTICS_FILTERS_STORAGE_KEY, JSON.stringify(appliedFilters));\n  }, [appliedFilters]);\n\n  const dateFormatter = useMemo(\n    () =>\n      new Intl.DateTimeFormat(undefined, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      }),\n    []\n  );\n\n  const numberFormatter = useMemo(\n    () =>\n      new Intl.NumberFormat(undefined, {\n        notation: 'compact',\n        maximumFractionDigits: 1\n      }),\n    []\n  );\n\n  const formatTooltipLabel = useCallback(\n    (value: unknown) => {\n      if (value instanceof Date) {\n        return dateFormatter.format(value);\n      }\n      if (typeof value === 'string' || typeof value === 'number') {\n        const parsed = new Date(value);\n        if (!Number.isNaN(parsed.getTime())) {\n          return dateFormatter.format(parsed);\n        }\n      }\n      return '';\n    },\n    [dateFormatter]\n  );\n\n  const formatTooltipValue = useCallback(\n    (value: number | null) => {\n      if (typeof value === 'number' && Number.isFinite(value)) {\n        return numberFormatter.format(value);\n      }\n      return '';\n    },\n    [numberFormatter]\n  );\n\n  const lineChartSlotProps = useMemo(\n    () =>\n      ({\n        tooltip: {\n          labelFormatter: (params: { value: unknown }) => formatTooltipLabel(params.value),\n          valueFormatter: (value: number | null) => formatTooltipValue(value)\n        }\n      }) as LineChartWithEventsProps['slotProps'],\n    [formatTooltipLabel, formatTooltipValue]\n  );\n\n  const barChartSlotProps = useMemo(\n    () =>\n      ({\n        tooltip: {\n          valueFormatter: (value: number | null) => formatTooltipValue(value)\n        }\n      }) as BarChartWithEventsProps['slotProps'],\n    [formatTooltipValue]\n  );\n\n  const chartFallback = useMemo(() => {\n    return (\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: 320\n        }}\n      >\n        <CircularProgress size={24} />\n      </Box>\n    );\n  }, []);\n\n  const handleInputChange = useCallback((key: keyof AnalyticsFilters, value: string) => {\n    const normalized = value.trim();\n    setFilters((prev) => ({\n      ...prev,\n      [key]: normalized === '' ? null : normalized\n    }));\n  }, []);\n\n  const handleApply = useCallback(() => {\n    setAppliedFilters(filters);\n    setSearchParams(buildAnalyticsSearchParams(filters, trendInterval));\n  }, [filters, trendInterval, setSearchParams]);\n\n  const handleReset = useCallback(() => {\n    const nextFilters = { ...DEFAULT_FILTERS };\n    setFilters(nextFilters);\n    setAppliedFilters(nextFilters);\n    setTrendInterval(DEFAULT_INTERVAL);\n    setSearchParams(buildAnalyticsSearchParams(DEFAULT_FILTERS, DEFAULT_INTERVAL));\n    if (typeof window !== 'undefined') {\n      window.localStorage.removeItem(ANALYTICS_FILTERS_STORAGE_KEY);\n    }\n  }, [setSearchParams]);\n\n  const handleIntervalChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const nextInterval = event.target.value as TrendInterval;\n      setTrendInterval(nextInterval);\n      setSearchParams(buildAnalyticsSearchParams(appliedFilters, nextInterval));\n    },\n    [appliedFilters, setSearchParams]\n  );\n\n  const buildListParams = useCallback(\n    (patch: Partial<AnalyticsFilters> = {}) => buildListSearchParams(appliedFilters, patch),\n    [appliedFilters]\n  );\n\n  const navigateToList = useCallback(\n    (target: 'leads' | 'deals', patch: Partial<AnalyticsFilters> = {}) => {\n      const params = buildListParams(patch);\n      const query = params.toString();\n      navigate(query ? `/${target}?${query}` : `/${target}`);\n    },\n    [buildListParams, navigate]\n  );\n\n  const determineTargetFromSeriesId = useCallback(\n    (seriesId?: string | number): 'leads' | 'deals' => {\n      if (!seriesId) {\n        return 'deals';\n      }\n      const normalized = String(seriesId).toLowerCase();\n      if (normalized.includes('lead')) {\n        return 'leads';\n      }\n      return 'deals';\n    },\n    []\n  );\n\n  const handleTrendPointClick = useCallback(\n    (seriesId: string | number | undefined, dataIndex: number) => {\n      const date = trendSeries.xAxis[dataIndex];\n      if (!date) {\n        return;\n      }\n      const target = determineTargetFromSeriesId(seriesId);\n      const day = formatDateParam(date);\n      navigateToList(target, { dateFrom: day, dateTo: day });\n    },\n    [determineTargetFromSeriesId, navigateToList, trendSeries]\n  );\n\n  const handleLeadsCreatedClick = useCallback(() => {\n    navigateToList('leads');\n  }, [navigateToList]);\n\n  const handleDealsCreatedClick = useCallback(() => {\n    navigateToList('deals');\n  }, [navigateToList]);\n\n  const renderKpiValue = (value: number, formatter?: (value: number) => string) =>\n    formatter ? formatter(value) : value.toLocaleString();\n\n  return (\n    <MainCard title=\"Analytics\">\n      <Stack spacing={3}>\n        <Stack\n          direction={{ xs: 'column', md: 'row' }}\n          spacing={2}\n          alignItems={{ xs: 'stretch', md: 'flex-end' }}\n        >\n          <TextField\n            type=\"date\"\n            label=\"Date From\"\n            value={filters.dateFrom ?? ''}\n            onChange={(event) => handleInputChange('dateFrom', event.target.value)}\n            InputLabelProps={{ shrink: true }}\n            sx={{ minWidth: 200 }}\n          />\n          <TextField\n            type=\"date\"\n            label=\"Date To\"\n            value={filters.dateTo ?? ''}\n            onChange={(event) => handleInputChange('dateTo', event.target.value)}\n            InputLabelProps={{ shrink: true }}\n            sx={{ minWidth: 200 }}\n          />\n          <TextField\n            label=\"Source\"\n            placeholder=\"All sources\"\n            value={filters.source ?? ''}\n            onChange={(event) => handleInputChange('source', event.target.value)}\n            sx={{ minWidth: 200 }}\n          />\n          <TextField\n            select\n            label=\"Stage\"\n            value={filters.stage ?? ''}\n            onChange={(event) => handleInputChange('stage', event.target.value)}\n            sx={{ minWidth: 200 }}\n          >\n            <MenuItem value=\"\">All stages</MenuItem>\n            {DEAL_STAGES.map((stage) => (\n              <MenuItem key={stage} value={stage}>\n                {stage}\n              </MenuItem>\n            ))}\n          </TextField>\n          <TextField\n            label=\"Owner ID\"\n            placeholder=\"Owner UUID\"\n            value={filters.ownerId ?? ''}\n            onChange={(event) => handleInputChange('ownerId', event.target.value)}\n            sx={{ minWidth: 200 }}\n          />\n          <TextField\n            select\n            label=\"Trend Interval\"\n            value={trendInterval}\n            onChange={handleIntervalChange}\n            sx={{ minWidth: 160 }}\n          >\n            <MenuItem value=\"day\">Daily</MenuItem>\n            <MenuItem value=\"week\">Weekly</MenuItem>\n            <MenuItem value=\"month\">Monthly</MenuItem>\n          </TextField>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button variant=\"contained\" onClick={handleApply} disabled={!isDirty}>\n              Apply\n            </Button>\n            <Button variant=\"outlined\" onClick={handleReset} disabled={!isDirty}>\n              Reset\n            </Button>\n          </Box>\n        </Stack>\n\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 6 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {!loading && error && <Alert severity=\"error\">{error}</Alert>}\n\n        {!loading && !error && (\n          <Stack spacing={3}>\n            <Grid container spacing={2}>\n              {state.kpis ? (\n                <>\n                  <Grid xs={12} sm={6} md={3}>\n                    <Card variant=\"outlined\">\n                      <CardActionArea\n                        data-testid={KPI_CARD_TEST_IDS.leadsCreated}\n                        onClick={handleLeadsCreatedClick}\n                      >\n                        <CardContent>\n                          <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                            Leads Created\n                          </Typography>\n                          <Typography variant=\"h4\">\n                            {renderKpiValue(state.kpis.leadsCreated)}\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                    </Card>\n                  </Grid>\n\n                  <Grid xs={12} sm={6} md={3}>\n                    <Card variant=\"outlined\">\n                      <CardActionArea\n                        data-testid={KPI_CARD_TEST_IDS.dealsCreated}\n                        onClick={handleDealsCreatedClick}\n                      >\n                        <CardContent>\n                          <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                            Deals Created\n                          </Typography>\n                          <Typography variant=\"h4\">\n                            {renderKpiValue(state.kpis.dealsCreated)}\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                    </Card>\n                  </Grid>\n\n                  <Grid xs={12} sm={6} md={3}>\n                    <Card variant=\"outlined\">\n                      <CardActionArea\n                        data-testid={KPI_CARD_TEST_IDS.dealsWon}\n                        onClick={() => navigateToList('deals', { stage: 'Closed Won' })}\n                      >\n                        <CardContent>\n                          <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                            Deals Won\n                          </Typography>\n                          <Typography variant=\"h4\">\n                            {renderKpiValue(state.kpis.dealsWon)}\n                          </Typography>\n                        </CardContent>\n                      </CardActionArea>\n                    </Card>\n                  </Grid>\n\n                  <Grid xs={12} sm={6} md={3}>\n                    <Card variant=\"outlined\">\n                      <CardContent>\n                        <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                          Win Rate\n                        </Typography>\n                        <Typography variant=\"h4\">\n                          {renderKpiValue(state.kpis.winRate, (value) => `${value.toFixed(1)}%`)}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n\n                  <Grid xs={12} sm={6} md={3}>\n                    <Card variant=\"outlined\">\n                      <CardContent>\n                        <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                          Avg. Cycle (days)\n                        </Typography>\n                        <Typography variant=\"h4\">\n                          {renderKpiValue(state.kpis.avgCycleDays, (value) => value.toFixed(1))}\n                        </Typography>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n\n                  {typeof state.kpis.revenue === 'number' && (\n                    <Grid xs={12} sm={6} md={3}>\n                      <Card variant=\"outlined\">\n                        <CardContent>\n                          <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                            Revenue\n                          </Typography>\n                          <Typography variant=\"h4\">\n                            ${state.kpis.revenue.toLocaleString()}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  )}\n\n                  {typeof state.kpis.roas === 'number' && (\n                    <Grid xs={12} sm={6} md={3}>\n                      <Card variant=\"outlined\">\n                        <CardContent>\n                          <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                            ROAS\n                          </Typography>\n                          <Typography variant=\"h4\">\n                            {renderKpiValue(state.kpis.roas, (value) => `${value.toFixed(2)}x`)}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    </Grid>\n                  )}\n                </>\n              ) : (\n                <Grid xs={12}>\n                  <Card variant=\"outlined\">\n                    <CardContent>\n                      <Typography color=\"text.secondary\">No KPI data available.</Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n              )}\n            </Grid>\n\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\">Trends</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Performance across the selected date range.\n                </Typography>\n                <Divider sx={{ my: 2 }} />\n                {trendSeries.series.length === 0 ? (\n                  <Typography color=\"text.secondary\">\n                    No trend data for the selected filters.\n                  </Typography>\n                ) : (\n                  <Suspense fallback={chartFallback}>\n                    <LineChartWithEvents\n                      height={320}\n                      xAxis={[\n                        {\n                          data: trendSeries.xAxis,\n                          scaleType: 'time',\n                          valueFormatter: (value: unknown) => formatTooltipLabel(value)\n                        }\n                      ]}\n                      series={trendSeries.series.map((series) => ({\n                        ...series,\n                        valueFormatter: (value: number | null) => formatTooltipValue(value)\n                      }))}\n                      onItemClick={(_event, item) => {\n                        const { seriesId, dataIndex } = item ?? {};\n                        if (typeof dataIndex !== 'number') {\n                          return;\n                        }\n                        handleTrendPointClick(seriesId, dataIndex);\n                      }}\n                      slotProps={lineChartSlotProps}\n                    />\n                  </Suspense>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\">Funnel</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Conversion through each stage.\n                </Typography>\n                <Divider sx={{ my: 2 }} />\n                {funnelChart.categories.length === 0 ? (\n                  <Typography color=\"text.secondary\">\n                    No funnel data for the selected filters.\n                  </Typography>\n                ) : (\n                  <Suspense fallback={chartFallback}>\n                    <BarChartWithEvents\n                      height={320}\n                      xAxis={[\n                        {\n                          scaleType: 'band',\n                          data: funnelChart.categories\n                        }\n                      ]}\n                      series={[\n                        {\n                          data: funnelChart.counts,\n                          label: 'Deals',\n                          valueFormatter: (value: number | null) => formatTooltipValue(value)\n                        }\n                      ]}\n                      onItemClick={(_event, item) => {\n                        const { seriesId, dataIndex } = item ?? {};\n                        if (typeof dataIndex !== 'number') {\n                          return;\n                        }\n                        const stage = funnelChart.categories[dataIndex];\n                        if (!stage) {\n                          return;\n                        }\n                        const target = determineTargetFromSeriesId(seriesId);\n                        navigateToList(target, { stage });\n                      }}\n                      slotProps={barChartSlotProps}\n                    />\n                  </Suspense>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h6\">Cohorts</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Cohort performance over time.\n                </Typography>\n                <Divider sx={{ my: 2 }} />\n                {cohortRows.length === 0 ? (\n                  <Typography color=\"text.secondary\">\n                    No cohort data for the selected filters.\n                  </Typography>\n                ) : (\n                  <TableContainer component={Paper} variant=\"outlined\">\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Cohort</TableCell>\n                          <TableCell align=\"right\">Total</TableCell>\n                          <TableCell align=\"right\">Converted</TableCell>\n                          <TableCell align=\"right\">Conversion</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {cohortRows.map((row) => (\n                          <TableRow key={row.cohortKey} hover>\n                            <TableCell>{row.cohortKey}</TableCell>\n                            <TableCell align=\"right\">{row.total.toLocaleString()}</TableCell>\n                            <TableCell align=\"right\">{row.converted.toLocaleString()}</TableCell>\n                            <TableCell align=\"right\">{row.conversionRate.toFixed(1)}%</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n              </CardContent>\n            </Card>\n          </Stack>\n        )}\n      </Stack>\n    </MainCard>\n  );\n}\n"],"file":"AnalyticsDashboard-CB20ry8q.js"}