{"version":3,"file":"AuthRegister-ClIQQV4K.js","sources":["../../src/views/pages/authentication/jwt/AuthRegister.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Link, useNavigate, useSearchParams } from 'react-router-dom';\nimport { useDispatch } from 'store';\n\n// material-ui\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport Grid from '@mui/material/Grid';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// third party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project imports\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport CustomFormControl from 'ui-component/extended/Form/CustomFormControl';\nimport useAuth from 'hooks/useAuth';\nimport useScriptRef from 'hooks/useScriptRef';\nimport { strengthColor, strengthIndicator } from 'utils/password-strength';\nimport { openSnackbar } from 'store/slices/snackbar';\n\n// assets\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\n// ===========================|| JWT - REGISTER ||=========================== //\n\nexport default function JWTRegister({ ...others }) {\n  const navigate = useNavigate();\n  const scriptedRef = useScriptRef();\n  const dispatch = useDispatch();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [checked, setChecked] = useState(true);\n\n  const [strength, setStrength] = useState(0);\n  const [level, setLevel] = useState();\n  const { register } = useAuth();\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const [searchParams] = useSearchParams();\n  const authParam = searchParams.get('auth');\n\n  const changePassword = (value) => {\n    const temp = strengthIndicator(value);\n    setStrength(temp);\n    setLevel(strengthColor(temp));\n  };\n\n  useEffect(() => {\n    changePassword('123456');\n  }, []);\n\n  return (\n    <>\n      <Stack sx={{ mb: 2, alignItems: 'center' }}>\n        <Typography variant=\"subtitle1\">Sign up with Email address </Typography>\n      </Stack>\n\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n          firstName: '',\n          lastName: '',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          firstName: Yup.string()\n            .trim()\n            .required('First name is required')\n            .min(2, 'First name must be at least 2 characters')\n            .max(50, 'First name must not exceed 50 characters')\n            .matches(/^[A-Za-z\\s]+$/, 'First name can only contain letters and spaces'),\n          lastName: Yup.string()\n            .trim()\n            .required('Last name is required')\n            .min(2, 'Last name must be at least 2 characters')\n            .max(50, 'Last name must not exceed 50 characters')\n            .matches(/^[A-Za-z\\s]+$/, 'Last name can only contain letters and spaces'),\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          password: Yup.string()\n            .required('Password is required')\n            .test(\n              'no-leading-trailing-whitespace',\n              'Password can not start or end with spaces',\n              (value) => value === value.trim()\n            )\n            .max(10, 'Password must be less than 10 characters')\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            const trimmedFirstName = values.firstName.trim();\n            const trimmedLastName = values.lastName.trim();\n            const trimmedEmail = values.email.trim();\n            await register?.(trimmedEmail, values.password, trimmedFirstName, trimmedLastName);\n            if (scriptedRef.current) {\n              setStatus({ success: true });\n              setSubmitting(false);\n              dispatch(\n                openSnackbar({\n                  open: true,\n                  message: 'Your registration has been successfully completed.',\n                  variant: 'alert',\n                  alert: {\n                    color: 'success'\n                  },\n                  close: false\n                })\n              );\n\n              setTimeout(() => {\n                navigate(authParam ? `/login?auth=${authParam}` : '/login', {\n                  replace: true\n                });\n              }, 1500);\n            }\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit} {...others}>\n            <Grid container spacing={{ xs: 0, sm: 2 }}>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <CustomFormControl fullWidth error={Boolean(touched.firstName && errors.firstName)}>\n                  <InputLabel htmlFor=\"outlined-adornment-first-register\">First Name</InputLabel>\n                  <OutlinedInput\n                    id=\"outlined-adornment-first-register\"\n                    type=\"text\"\n                    name=\"firstName\"\n                    value={values.firstName}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                  {touched.firstName && errors.firstName && (\n                    <FormHelperText error id=\"standard-weight-helper-text--register\">\n                      {errors.firstName}\n                    </FormHelperText>\n                  )}\n                </CustomFormControl>\n              </Grid>\n              <Grid size={{ xs: 12, sm: 6 }}>\n                <CustomFormControl fullWidth error={Boolean(touched.lastName && errors.lastName)}>\n                  <InputLabel htmlFor=\"outlined-adornment-last-register\">Last Name</InputLabel>\n                  <OutlinedInput\n                    id=\"outlined-adornment-last-register\"\n                    type=\"text\"\n                    name=\"lastName\"\n                    value={values.lastName}\n                    onBlur={handleBlur}\n                    onChange={handleChange}\n                  />\n                  {touched.lastName && errors.lastName && (\n                    <FormHelperText error id=\"standard-weight-helper-text--register\">\n                      {errors.lastName}\n                    </FormHelperText>\n                  )}\n                </CustomFormControl>\n              </Grid>\n            </Grid>\n            <CustomFormControl fullWidth error={Boolean(touched.email && errors.email)}>\n              <InputLabel htmlFor=\"outlined-adornment-email-register\">\n                Email Address / Username\n              </InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-email-register\"\n                type=\"email\"\n                value={values.email}\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n              {touched.email && errors.email && (\n                <FormHelperText error id=\"standard-weight-helper-text--register\">\n                  {errors.email}\n                </FormHelperText>\n              )}\n            </CustomFormControl>\n\n            <CustomFormControl fullWidth error={Boolean(touched.password && errors.password)}>\n              <InputLabel htmlFor=\"outlined-adornment-password-register\">Password</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password-register\"\n                type={showPassword ? 'text' : 'password'}\n                value={values.password}\n                name=\"password\"\n                label=\"Password\"\n                onBlur={handleBlur}\n                onChange={(e) => {\n                  handleChange(e);\n                  changePassword(e.target.value);\n                }}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                      size=\"large\"\n                    >\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n              />\n              {touched.password && errors.password && (\n                <FormHelperText error id=\"standard-weight-helper-text-password-register\">\n                  {errors.password}\n                </FormHelperText>\n              )}\n            </CustomFormControl>\n\n            {strength !== 0 && (\n              <FormControl fullWidth>\n                <Box sx={{ mb: 2 }}>\n                  <Stack direction=\"row\" sx={{ gap: 2, alignItems: 'center' }}>\n                    <Box\n                      sx={{ width: 85, height: 8, borderRadius: '7px', bgcolor: level?.color }}\n                    />\n                    <Typography variant=\"subtitle1\" sx={{ fontSize: '0.75rem' }}>\n                      {level?.label}\n                    </Typography>\n                  </Stack>\n                </Box>\n              </FormControl>\n            )}\n\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={checked}\n                  onChange={(event) => setChecked(event.target.checked)}\n                  name=\"checked\"\n                  color=\"primary\"\n                />\n              }\n              label={\n                <Typography variant=\"subtitle1\">\n                  Agree with &nbsp;\n                  <Typography variant=\"subtitle1\" component={Link} to=\"#\">\n                    Terms & Condition.\n                  </Typography>\n                </Typography>\n              }\n            />\n            {errors.submit && (\n              <Box sx={{ mt: 3 }}>\n                <FormHelperText error>{errors.submit}</FormHelperText>\n              </Box>\n            )}\n\n            <Box sx={{ mt: 2 }}>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  disabled={isSubmitting}\n                  fullWidth\n                  size=\"large\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Sign up\n                </Button>\n              </AnimateButton>\n            </Box>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n"],"names":["useEffect","useState","importShared","Link","useNavigate","useSearchParams","JWTRegister","others","navigate","scriptedRef","useScriptRef","dispatch","useDispatch","showPassword","setShowPassword","checked","setChecked","strength","setStrength","level","setLevel","register","useAuth","handleClickShowPassword","handleMouseDownPassword","event","searchParams","authParam","changePassword","value","temp","strengthIndicator","strengthColor","jsxs","Fragment","jsx","Stack","Typography","Formik","Yup.object","Yup.string","values","setErrors","setStatus","setSubmitting","trimmedFirstName","trimmedLastName","trimmedEmail","openSnackbar","err","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Grid","CustomFormControl","InputLabel","OutlinedInput","FormHelperText","e","InputAdornment","IconButton","Visibility","VisibilityOff","FormControl","Box","FormControlLabel","Checkbox","AnimateButton","Button"],"mappings":"47BAAA,KAAA,CAAA,UAAAA,GAAA,SAAAC,CAAA,EAAA,MAAAC,EAAA,OAAA,EACA,CAAA,KAAAC,GAAA,YAAAC,GAAA,gBAAAC,EAAA,EAAA,MAAAH,EAAA,kBAAA,EAoCA,SAAwBI,GAAY,CAAE,GAAGC,GAAU,CACjD,MAAMC,EAAWJ,GAAA,EACXK,EAAcC,EAAA,EACdC,EAAWC,EAAA,EAEX,CAACC,EAAcC,CAAe,EAAIb,EAAS,EAAK,EAChD,CAACc,EAASC,CAAU,EAAIf,EAAS,EAAI,EAErC,CAACgB,EAAUC,CAAW,EAAIjB,EAAS,CAAC,EACpC,CAACkB,EAAOC,CAAQ,EAAInB,EAAA,EACpB,CAAE,SAAAoB,CAAA,EAAaC,EAAA,EAEfC,EAA0B,IAAM,CACpCT,EAAgB,CAACD,CAAY,CAC/B,EAEMW,EAA2BC,GAAU,CACzCA,EAAM,eAAA,CACR,EAEM,CAACC,CAAY,EAAIrB,GAAA,EACjBsB,EAAYD,EAAa,IAAI,MAAM,EAEnCE,EAAkBC,GAAU,CAChC,MAAMC,EAAOC,EAAkBF,CAAK,EACpCX,EAAYY,CAAI,EAChBV,EAASY,EAAcF,CAAI,CAAC,CAC9B,EAEA,OAAA9B,GAAU,IAAM,CACd4B,EAAe,QAAQ,CACzB,EAAG,CAAA,CAAE,EAGHK,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAC,EAAAA,IAACC,EAAA,CAAM,GAAI,CAAE,GAAI,EAAG,WAAY,QAAA,EAC9B,SAAAD,EAAAA,IAACE,EAAA,CAAW,QAAQ,YAAY,uCAA2B,EAC7D,EAEAF,EAAAA,IAACG,EAAA,CACC,cAAe,CACb,MAAO,GACP,SAAU,GACV,UAAW,GACX,SAAU,GACV,OAAQ,IAAA,EAEV,iBAAkBC,EAAI,EAAS,MAAM,CACnC,UAAWC,EAAI,EACZ,KAAA,EACA,SAAS,wBAAwB,EACjC,IAAI,EAAG,0CAA0C,EACjD,IAAI,GAAI,0CAA0C,EAClD,QAAQ,gBAAiB,gDAAgD,EAC5E,SAAUA,EAAI,EACX,KAAA,EACA,SAAS,uBAAuB,EAChC,IAAI,EAAG,yCAAyC,EAChD,IAAI,GAAI,yCAAyC,EACjD,QAAQ,gBAAiB,+CAA+C,EAC3E,MAAOA,IAAa,MAAM,uBAAuB,EAAE,IAAI,GAAG,EAAE,SAAS,mBAAmB,EACxF,SAAUA,EAAI,EACX,SAAS,sBAAsB,EAC/B,KACC,iCACA,4CACCX,GAAUA,IAAUA,EAAM,KAAA,CAAK,EAEjC,IAAI,GAAI,0CAA0C,CAAA,CACtD,EACD,SAAU,MAAOY,EAAQ,CAAE,UAAAC,EAAW,UAAAC,EAAW,cAAAC,KAAoB,CACnE,GAAI,CACF,MAAMC,EAAmBJ,EAAO,UAAU,KAAA,EACpCK,EAAkBL,EAAO,SAAS,KAAA,EAClCM,EAAeN,EAAO,MAAM,KAAA,EAClC,MAAMpB,IAAW0B,EAAcN,EAAO,SAAUI,EAAkBC,CAAe,EAC7ErC,EAAY,UACdkC,EAAU,CAAE,QAAS,GAAM,EAC3BC,EAAc,EAAK,EACnBjC,EACEqC,EAAa,CACX,KAAM,GACN,QAAS,qDACT,QAAS,QACT,MAAO,CACL,MAAO,SAAA,EAET,MAAO,EAAA,CACR,CAAA,EAGH,WAAW,IAAM,CACfxC,EAASmB,EAAY,eAAeA,CAAS,GAAK,SAAU,CAC1D,QAAS,EAAA,CACV,CACH,EAAG,IAAI,EAEX,OAASsB,EAAK,CACZ,QAAQ,MAAMA,CAAG,EACbxC,EAAY,UACdkC,EAAU,CAAE,QAAS,GAAO,EAC5BD,EAAU,CAAE,OAAQO,EAAI,OAAA,CAAS,EACjCL,EAAc,EAAK,EAEvB,CACF,EAEC,UAAC,CAAE,OAAAM,EAAQ,WAAAC,EAAY,aAAAC,EAAc,aAAAC,EAAc,aAAAC,EAAc,QAAAC,EAAS,OAAAd,CAAA,WACxE,OAAA,CAAK,WAAU,GAAC,SAAUY,EAAe,GAAG9C,EAC3C,SAAA,CAAA0B,EAAAA,KAACuB,EAAA,CAAK,UAAS,GAAC,QAAS,CAAE,GAAI,EAAG,GAAI,CAAA,EACpC,SAAA,CAAArB,MAACqB,GAAK,KAAM,CAAE,GAAI,GAAI,GAAI,GACxB,SAAAvB,EAAAA,KAACwB,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQF,EAAQ,WAAaL,EAAO,WACtE,SAAA,CAAAf,EAAAA,IAACuB,EAAA,CAAW,QAAQ,oCAAoC,SAAA,aAAU,EAClEvB,EAAAA,IAACwB,EAAA,CACC,GAAG,oCACH,KAAK,OACL,KAAK,YACL,MAAOlB,EAAO,UACd,OAAQU,EACR,SAAUC,CAAA,CAAA,EAEXG,EAAQ,WAAaL,EAAO,WAC3Bf,EAAAA,IAACyB,EAAA,CAAe,MAAK,GAAC,GAAG,wCACtB,SAAAV,EAAO,SAAA,CACV,CAAA,CAAA,CAEJ,CAAA,CACF,QACCM,EAAA,CAAK,KAAM,CAAE,GAAI,GAAI,GAAI,GACxB,gBAACC,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQF,EAAQ,UAAYL,EAAO,UACrE,SAAA,CAAAf,EAAAA,IAACuB,EAAA,CAAW,QAAQ,mCAAmC,SAAA,YAAS,EAChEvB,EAAAA,IAACwB,EAAA,CACC,GAAG,mCACH,KAAK,OACL,KAAK,WACL,MAAOlB,EAAO,SACd,OAAQU,EACR,SAAUC,CAAA,CAAA,EAEXG,EAAQ,UAAYL,EAAO,UAC1Bf,EAAAA,IAACyB,EAAA,CAAe,MAAK,GAAC,GAAG,wCACtB,SAAAV,EAAO,QAAA,CACV,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EACAjB,EAAAA,KAACwB,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQF,EAAQ,OAASL,EAAO,OAClE,SAAA,CAAAf,EAAAA,IAACuB,EAAA,CAAW,QAAQ,oCAAoC,SAAA,2BAExD,EACAvB,EAAAA,IAACwB,EAAA,CACC,GAAG,oCACH,KAAK,QACL,MAAOlB,EAAO,MACd,KAAK,QACL,OAAQU,EACR,SAAUC,CAAA,CAAA,EAEXG,EAAQ,OAASL,EAAO,OACvBf,EAAAA,IAACyB,EAAA,CAAe,MAAK,GAAC,GAAG,wCACtB,SAAAV,EAAO,KAAA,CACV,CAAA,EAEJ,EAEAjB,EAAAA,KAACwB,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQF,EAAQ,UAAYL,EAAO,UACrE,SAAA,CAAAf,EAAAA,IAACuB,EAAA,CAAW,QAAQ,uCAAuC,SAAA,WAAQ,EACnEvB,EAAAA,IAACwB,EAAA,CACC,GAAG,uCACH,KAAM9C,EAAe,OAAS,WAC9B,MAAO4B,EAAO,SACd,KAAK,WACL,MAAM,WACN,OAAQU,EACR,SAAWU,GAAM,CACfT,EAAaS,CAAC,EACdjC,EAAeiC,EAAE,OAAO,KAAK,CAC/B,EACA,aACE1B,EAAAA,IAAC2B,EAAA,CAAe,SAAS,MACvB,SAAA3B,EAAAA,IAAC4B,EAAA,CACC,aAAW,6BACX,QAASxC,EACT,YAAaC,EACb,KAAK,MACL,KAAK,QAEJ,SAAAX,EAAesB,MAAC6B,EAAA,CAAA,CAAW,QAAMC,EAAA,CAAA,CAAc,CAAA,CAAA,CAClD,CACF,CAAA,CAAA,EAGHV,EAAQ,UAAYL,EAAO,UAC1Bf,EAAAA,IAACyB,EAAA,CAAe,MAAK,GAAC,GAAG,gDACtB,SAAAV,EAAO,QAAA,CACV,CAAA,EAEJ,EAECjC,IAAa,GACZkB,EAAAA,IAAC+B,EAAA,CAAY,UAAS,GACpB,SAAA/B,EAAAA,IAACgC,EAAA,CAAI,GAAI,CAAE,GAAI,GACb,SAAAlC,EAAAA,KAACG,EAAA,CAAM,UAAU,MAAM,GAAI,CAAE,IAAK,EAAG,WAAY,QAAA,EAC/C,SAAA,CAAAD,EAAAA,IAACgC,EAAA,CACC,GAAI,CAAE,MAAO,GAAI,OAAQ,EAAG,aAAc,MAAO,QAAShD,GAAO,KAAA,CAAM,CAAA,EAEzEgB,EAAAA,IAACE,EAAA,CAAW,QAAQ,YAAY,GAAI,CAAE,SAAU,SAAA,EAC7C,SAAAlB,GAAO,KAAA,CACV,CAAA,CAAA,CACF,EACF,EACF,EAGFgB,EAAAA,IAACiC,EAAA,CACC,QACEjC,EAAAA,IAACkC,EAAA,CACC,QAAAtD,EACA,SAAWU,GAAUT,EAAWS,EAAM,OAAO,OAAO,EACpD,KAAK,UACL,MAAM,SAAA,CAAA,EAGV,MACEQ,EAAAA,KAACI,EAAA,CAAW,QAAQ,YAAY,SAAA,CAAA,eAE9BF,EAAAA,IAACE,GAAW,QAAQ,YAAY,UAAWlC,GAAM,GAAG,IAAI,SAAA,oBAAA,CAExD,CAAA,CAAA,CACF,CAAA,CAAA,EAGH+C,EAAO,QACNf,EAAAA,IAACgC,EAAA,CAAI,GAAI,CAAE,GAAI,GACb,eAACP,EAAA,CAAe,MAAK,GAAE,SAAAV,EAAO,OAAO,EACvC,EAGFf,EAAAA,IAACgC,GAAI,GAAI,CAAE,GAAI,GACb,eAACG,EAAA,CACC,SAAAnC,EAAAA,IAACoC,GAAA,CACC,iBAAgB,GAChB,SAAUjB,EACV,UAAS,GACT,KAAK,QACL,KAAK,SACL,QAAQ,YACR,MAAM,YACP,SAAA,SAAA,CAAA,EAGH,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,EACF,CAEJ"}