{"version":3,"file":"colorUtils-CDwdn4xN.js","sources":["../../src/utils/colorUtils.ts"],"sourcesContent":["import { alpha } from '@mui/material/styles';\n\ntype PalettePrimitive = string | number | null | undefined;\ntype PaletteLike = {\n  [key: string]: PalettePrimitive | PaletteLike;\n};\n\nfunction isPaletteLike(value: unknown): value is PaletteLike {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\n/**\n * Converts a hex color string to a space-delimited RGB channel string (\"r g b\").\n *\n * Supports 3, 4, 6, and 8 character hex values (with optional leading '#').\n */\nexport function hexToRgbChannel(hex: string): string {\n  let cleaned = hex.replace(/^#/, '');\n\n  if (cleaned.length === 3 || cleaned.length === 4) {\n    cleaned = cleaned\n      .split('')\n      .map((char) => char + char)\n      .join('');\n  }\n\n  if (cleaned.length !== 6 && cleaned.length !== 8) {\n    throw new Error(`Invalid hex color: ${hex}`);\n  }\n\n  const r = Number.parseInt(cleaned.substring(0, 2), 16);\n  const g = Number.parseInt(cleaned.substring(2, 4), 16);\n  const b = Number.parseInt(cleaned.substring(4, 6), 16);\n\n  return `${r} ${g} ${b}`;\n}\n\nexport function extendPaletteWithChannels<T extends PaletteLike>(palette: T): T & PaletteLike {\n  const result: PaletteLike = { ...palette };\n\n  Object.entries(palette).forEach(([key, value]) => {\n    if (typeof value === 'string' && value.startsWith('#')) {\n      result[`${key}Channel`] = hexToRgbChannel(value);\n    } else if (isPaletteLike(value)) {\n      result[key] = extendPaletteWithChannels(value);\n    }\n  });\n\n  return result as T & PaletteLike;\n}\n\nexport function withAlpha(color: string, opacity: number): string {\n  if (/^#|rgb|hsl|color/i.test(color)) {\n    return alpha(color, opacity);\n  }\n\n  if (color.startsWith('var(')) {\n    return color\n      .replace(/(--[a-zA-Z0-9-]+)(.*)\\)/, `$1Channel$2)`)\n      .replace(/^var\\((.+)\\)$/, `rgba(var($1) / ${opacity})`);\n  }\n\n  return color;\n}\n"],"names":["isPaletteLike","value","hexToRgbChannel","hex","cleaned","char","r","g","b","extendPaletteWithChannels","palette","result","key","withAlpha","color","opacity","alpha"],"mappings":"6CAOA,SAASA,EAAcC,EAAsC,CAC3D,OAAO,OAAOA,GAAU,UAAYA,IAAU,MAAQ,CAAC,MAAM,QAAQA,CAAK,CAC5E,CAOO,SAASC,EAAgBC,EAAqB,CACnD,IAAIC,EAAUD,EAAI,QAAQ,KAAM,EAAE,EASlC,IAPIC,EAAQ,SAAW,GAAKA,EAAQ,SAAW,KAC7CA,EAAUA,EACP,MAAM,EAAE,EACR,IAAKC,GAASA,EAAOA,CAAI,EACzB,KAAK,EAAE,GAGRD,EAAQ,SAAW,GAAKA,EAAQ,SAAW,EAC7C,MAAM,IAAI,MAAM,sBAAsBD,CAAG,EAAE,EAG7C,MAAMG,EAAI,OAAO,SAASF,EAAQ,UAAU,EAAG,CAAC,EAAG,EAAE,EAC/CG,EAAI,OAAO,SAASH,EAAQ,UAAU,EAAG,CAAC,EAAG,EAAE,EAC/CI,EAAI,OAAO,SAASJ,EAAQ,UAAU,EAAG,CAAC,EAAG,EAAE,EAErD,MAAO,GAAGE,CAAC,IAAIC,CAAC,IAAIC,CAAC,EACvB,CAEO,SAASC,EAAiDC,EAA6B,CAC5F,MAAMC,EAAsB,CAAE,GAAGD,CAAA,EAEjC,cAAO,QAAQA,CAAO,EAAE,QAAQ,CAAC,CAACE,EAAKX,CAAK,IAAM,CAC5C,OAAOA,GAAU,UAAYA,EAAM,WAAW,GAAG,EACnDU,EAAO,GAAGC,CAAG,SAAS,EAAIV,EAAgBD,CAAK,EACtCD,EAAcC,CAAK,IAC5BU,EAAOC,CAAG,EAAIH,EAA0BR,CAAK,EAEjD,CAAC,EAEMU,CACT,CAEO,SAASE,EAAUC,EAAeC,EAAyB,CAChE,MAAI,oBAAoB,KAAKD,CAAK,EACzBE,EAAMF,EAAOC,CAAO,EAGzBD,EAAM,WAAW,MAAM,EAClBA,EACJ,QAAQ,0BAA2B,cAAc,EACjD,QAAQ,gBAAiB,kBAAkBC,CAAO,GAAG,EAGnDD,CACT"}