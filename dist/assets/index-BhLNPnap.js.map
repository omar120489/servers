{"version":3,"file":"index-BhLNPnap.js","sources":["../../node_modules/@mui/styled-engine/esm/GlobalStyles/GlobalStyles.js","../../node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js","../../node_modules/@mui/material/esm/GlobalStyles/GlobalStyles.js","../../node_modules/@mui/material/esm/zero-styled/index.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Global } from '@emotion/react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction isEmpty(obj) {\n  return obj === undefined || obj === null || Object.keys(obj).length === 0;\n}\nexport default function GlobalStyles(props) {\n  const {\n    styles,\n    defaultTheme = {}\n  } = props;\n  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;\n  return /*#__PURE__*/_jsx(Global, {\n    styles: globalStyles\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes = {\n  defaultTheme: PropTypes.object,\n  styles: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.object, PropTypes.func])\n} : void 0;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles as MuiGlobalStyles, internal_serializeStyles as serializeStyles } from '@mui/styled-engine';\nimport useTheme from \"../useTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction wrapGlobalLayer(styles) {\n  const serialized = serializeStyles(styles);\n  if (styles !== serialized && serialized.styles) {\n    if (!serialized.styles.match(/^@layer\\s+[^{]*$/)) {\n      // If the styles are not already wrapped in a layer, wrap them in a global layer.\n      serialized.styles = `@layer global{${serialized.styles}}`;\n    }\n    return serialized;\n  }\n  return styles;\n}\nfunction GlobalStyles({\n  styles,\n  themeId,\n  defaultTheme = {}\n}) {\n  const upperTheme = useTheme(defaultTheme);\n  const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;\n  let globalStyles = typeof styles === 'function' ? styles(resolvedTheme) : styles;\n  if (resolvedTheme.modularCssLayers) {\n    if (Array.isArray(globalStyles)) {\n      globalStyles = globalStyles.map(styleArg => {\n        if (typeof styleArg === 'function') {\n          return wrapGlobalLayer(styleArg(resolvedTheme));\n        }\n        return wrapGlobalLayer(styleArg);\n      });\n    } else {\n      globalStyles = wrapGlobalLayer(globalStyles);\n    }\n  }\n  return /*#__PURE__*/_jsx(MuiGlobalStyles, {\n    styles: globalStyles\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  defaultTheme: PropTypes.object,\n  /**\n   * @ignore\n   */\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool]),\n  /**\n   * @ignore\n   */\n  themeId: PropTypes.string\n} : void 0;\nexport default GlobalStyles;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles as SystemGlobalStyles } from '@mui/system';\nimport defaultTheme from \"../styles/defaultTheme.js\";\nimport THEME_ID from \"../styles/identifier.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GlobalStyles(props) {\n  return /*#__PURE__*/_jsx(SystemGlobalStyles, {\n    ...props,\n    defaultTheme: defaultTheme,\n    themeId: THEME_ID\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? GlobalStyles.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The styles you want to apply globally.\n   */\n  styles: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.array, PropTypes.func, PropTypes.number, PropTypes.object, PropTypes.string, PropTypes.bool])\n} : void 0;\nexport default GlobalStyles;","import * as React from 'react';\nimport { extendSxProp } from '@mui/system/styleFunctionSx';\nimport useTheme from \"../styles/useTheme.js\";\nimport GlobalStyles from \"../GlobalStyles/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { css, keyframes } from '@mui/system';\nexport { default as styled } from \"../styles/styled.js\";\nexport function globalCss(styles) {\n  return function GlobalStylesWrapper(props) {\n    return (\n      /*#__PURE__*/\n      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.\n      _jsx(GlobalStyles, {\n        styles: typeof styles === 'function' ? theme => styles({\n          theme,\n          ...props\n        }) : styles\n      })\n    );\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function internal_createExtendSxProp() {\n  return extendSxProp;\n}\nexport { useTheme };"],"names":["importShared","Global","isEmpty","obj","GlobalStyles","props","styles","defaultTheme","globalStyles","themeInput","wrapGlobalLayer","serialized","serializeStyles","themeId","upperTheme","useTheme","resolvedTheme","styleArg","MuiGlobalStyles","SystemGlobalStyles","THEME_ID","globalCss","theme","internal_createExtendSxProp","extendSxProp"],"mappings":"wJAEA,MAAAA,EAAA,OAAA,EAEA,KAAA,CAAA,OAAAC,CAAA,EAAA,MAAAD,EAAA,gBAAA,EAEA,SAASE,EAAQC,EAAK,CACpB,OAA4BA,GAAQ,MAAQ,OAAO,KAAKA,CAAG,EAAE,SAAW,CAC1E,CACA,SAAwBC,EAAaC,EAAO,CAC1C,KAAM,CACJ,OAAAC,EACA,aAAAC,EAAe,CAAA,CAAC,EACdF,EACEG,EAAe,OAAOF,GAAW,WAAaG,GAAcH,EAAOJ,EAAQO,CAAU,EAAIF,EAAeE,CAAU,EAAIH,EAC5H,aAAyBL,EAAQ,CAC/B,OAAQO,CAAA,CACT,CACH,CChBA,MAAAR,EAAA,OAAA,EAKA,SAASU,EAAgBJ,EAAQ,CAC/B,MAAMK,EAAaC,EAAgBN,CAAM,EACzC,OAAIA,IAAWK,GAAcA,EAAW,QACjCA,EAAW,OAAO,MAAM,kBAAkB,IAE7CA,EAAW,OAAS,iBAAiBA,EAAW,MAAM,KAEjDA,GAEFL,CACT,CACA,SAASF,EAAa,CACpB,OAAAE,EACA,QAAAO,EACA,aAAAN,EAAe,CAAA,CACjB,EAAG,CACD,MAAMO,EAAaC,EAASR,CAAY,EAClCS,EAAgBH,GAAUC,EAAWD,CAAO,GAAKC,EACvD,IAAIN,EAAe,OAAOF,GAAW,WAAaA,EAAOU,CAAa,EAAIV,EAC1E,OAAIU,EAAc,mBACZ,MAAM,QAAQR,CAAY,EAC5BA,EAAeA,EAAa,IAAIS,GAErBP,EADL,OAAOO,GAAa,WACCA,EAASD,CAAa,EAExBC,CAFyB,CAGjD,EAEDT,EAAeE,EAAgBF,CAAY,SAGtBU,EAAiB,CACxC,OAAQV,CAAA,CACT,CACH,CCvCA,MAAAR,EAAA,OAAA,EAMA,SAASI,EAAaC,EAAO,CAC3B,aAAyBc,EAAoB,CAC3C,GAAGd,EACH,aAAAE,EACA,QAASa,CAAA,CACV,CACH,CCdA,MAAApB,EAAA,OAAA,EAOO,SAASqB,EAAUf,EAAQ,CAChC,OAAO,SAA6BD,EAAO,CACzC,aAGOD,EAAc,CACjB,OAAQ,OAAOE,GAAW,cAAsBA,EAAO,CACrD,MAAAgB,EACA,GAAGjB,CAAA,CACJ,EAAIC,CAAA,CACN,CAEL,CACF,CAGO,SAASiB,GAA8B,CAC5C,OAAOC,CACT","x_google_ignoreList":[0,1,2,3]}