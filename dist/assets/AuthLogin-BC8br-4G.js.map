{"version":3,"file":"AuthLogin-BC8br-4G.js","sources":["../../src/views/pages/authentication/firebase/AuthLogin.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport Divider from '@mui/material/Divider';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormHelperText from '@mui/material/FormHelperText';\nimport IconButton from '@mui/material/IconButton';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport InputLabel from '@mui/material/InputLabel';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// third party\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\n// project imports\nimport FirebaseSocial from './FirebaseSocial';\nimport useAuth from 'hooks/useAuth';\nimport useConfig from 'hooks/useConfig';\nimport useScriptRef from 'hooks/useScriptRef';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport CustomFormControl from 'ui-component/extended/Form/CustomFormControl';\nimport { withAlpha } from 'utils/colorUtils';\n\n// assets\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\n// ============================|| FIREBASE - LOGIN ||============================ //\n\nexport default function FirebaseLogin({ ...others }) {\n  const theme = useTheme();\n  const scriptedRef = useScriptRef();\n\n  const {\n    state: { borderRadius }\n  } = useConfig();\n\n  const [checked, setChecked] = useState(true);\n\n  const { firebaseEmailPasswordSignIn, isLoggedIn } = useAuth();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const [searchParams] = useSearchParams();\n  const authParam = searchParams.get('auth');\n\n  return (\n    <>\n      <Stack sx={{ gap: 2 }}>\n        <FirebaseSocial />\n        <Box\n          sx={{\n            alignItems: 'center',\n            display: 'flex'\n          }}\n        >\n          <Divider sx={{ flexGrow: 1 }} orientation=\"horizontal\" />\n\n          <Button\n            variant=\"outlined\"\n            sx={{\n              cursor: 'unset',\n              m: 2,\n              py: 0.5,\n              px: 7,\n              borderColor: `${theme.vars.palette.grey[100]} !important`,\n              color: `${theme.vars.palette.grey[900]} !important`,\n              fontWeight: 500,\n              borderRadius: `${borderRadius}px`,\n              ...theme.applyStyles('dark', {\n                borderColor: `${withAlpha(theme.vars.palette.dark.light, 0.2)} !important`\n              })\n            }}\n            disableRipple\n            disabled\n          >\n            OR\n          </Button>\n\n          <Divider sx={{ flexGrow: 1 }} orientation=\"horizontal\" />\n        </Box>\n        <Stack sx={{ mb: 2, alignItems: 'center' }}>\n          <Typography variant=\"subtitle1\">Sign in with Email address</Typography>\n        </Stack>\n      </Stack>\n      <Formik\n        initialValues={{\n          email: 'info@codedthemes.com',\n          password: '123456',\n          submit: null\n        }}\n        validationSchema={Yup.object().shape({\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n          password: Yup.string()\n            .required('Password is required')\n            .test(\n              'no-leading-trailing-whitespace',\n              'Password can not start or end with spaces',\n              (value) => value === value.trim()\n            )\n            .max(10, 'Password must be less than 10 characters')\n        })}\n        onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n          try {\n            if (firebaseEmailPasswordSignIn) {\n              const trimmedEmail = values.email.trim();\n              await firebaseEmailPasswordSignIn(trimmedEmail, values.password).then(\n                () => {\n                  // WARNING: do not set any formik state here as formik might be already destroyed here. You may get following error by doing so.\n                  // Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application.\n                  // To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\n                  // github issue: https://github.com/formium/formik/issues/2430\n                },\n                (err) => {\n                  setStatus({ success: false });\n                  setErrors({ submit: err.message });\n                  setSubmitting(false);\n                }\n              );\n            }\n          } catch (err) {\n            console.error(err);\n            if (scriptedRef.current) {\n              setStatus({ success: false });\n              setErrors({ submit: err.message });\n              setSubmitting(false);\n            }\n          }\n        }}\n      >\n        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n          <form noValidate onSubmit={handleSubmit} {...others}>\n            <CustomFormControl fullWidth error={Boolean(touched.email && errors.email)}>\n              <InputLabel htmlFor=\"outlined-adornment-email-login\">\n                Email Address / Username\n              </InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-email-login\"\n                type=\"email\"\n                value={values.email}\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                label=\"Email Address / Username\"\n              />\n              {touched.email && errors.email && (\n                <FormHelperText error id=\"standard-weight-helper-text-email-login\">\n                  {errors.email}\n                </FormHelperText>\n              )}\n            </CustomFormControl>\n\n            <CustomFormControl fullWidth error={Boolean(touched.password && errors.password)}>\n              <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password-login\"\n                type={showPassword ? 'text' : 'password'}\n                value={values.password}\n                name=\"password\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                      size=\"large\"\n                    >\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                label=\"Password\"\n              />\n              {touched.password && errors.password && (\n                <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                  {errors.password}\n                </FormHelperText>\n              )}\n            </CustomFormControl>\n            <Stack direction=\"row\" sx={{ alignItems: 'center', justifyContent: 'space-between' }}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={checked}\n                    onChange={(event) => setChecked(event.target.checked)}\n                    name=\"checked\"\n                    color=\"primary\"\n                  />\n                }\n                label=\"Remember me\"\n              />\n              <Typography\n                variant=\"subtitle1\"\n                component={Link}\n                to={\n                  isLoggedIn\n                    ? '/pages/forgot-password/forgot-password3'\n                    : authParam\n                      ? `/forgot-password?auth=${authParam}`\n                      : '/forgot-password'\n                }\n                sx={{ textDecoration: 'none', color: 'secondary.main' }}\n              >\n                Forgot Password?\n              </Typography>\n            </Stack>\n            {errors.submit && (\n              <Box sx={{ mt: 3 }}>\n                <FormHelperText error>{errors.submit}</FormHelperText>\n              </Box>\n            )}\n\n            <Box sx={{ mt: 2 }}>\n              <AnimateButton>\n                <Button\n                  disableElevation\n                  disabled={isSubmitting}\n                  fullWidth\n                  size=\"large\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Sign in\n                </Button>\n              </AnimateButton>\n            </Box>\n          </form>\n        )}\n      </Formik>\n    </>\n  );\n}\n"],"names":["useState","importShared","Link","useSearchParams","FirebaseLogin","others","theme","useTheme","scriptedRef","useScriptRef","borderRadius","useConfig","checked","setChecked","firebaseEmailPasswordSignIn","isLoggedIn","useAuth","showPassword","setShowPassword","handleClickShowPassword","handleMouseDownPassword","event","searchParams","authParam","jsxs","Fragment","Stack","jsx","FirebaseSocial","Box","Divider","Button","withAlpha","Typography","Formik","Yup.object","Yup.string","value","values","setErrors","setStatus","setSubmitting","trimmedEmail","err","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","CustomFormControl","InputLabel","OutlinedInput","FormHelperText","InputAdornment","IconButton","Visibility","VisibilityOff","FormControlLabel","Checkbox","AnimateButton"],"mappings":"miCAAA,KAAA,CAAA,SAAAA,CAAA,EAAA,MAAAC,EAAA,OAAA,EACA,CAAA,KAAAC,EAAA,gBAAAC,CAAA,EAAA,MAAAF,EAAA,kBAAA,EAoCA,SAAwBG,GAAc,CAAE,GAAGC,GAAU,CACnD,MAAMC,EAAQC,EAAA,EACRC,EAAcC,EAAA,EAEd,CACJ,MAAO,CAAE,aAAAC,CAAA,CAAa,EACpBC,EAAA,EAEE,CAACC,EAASC,CAAU,EAAIb,EAAS,EAAI,EAErC,CAAE,4BAAAc,EAA6B,WAAAC,CAAA,EAAeC,EAAA,EAE9C,CAACC,EAAcC,CAAe,EAAIlB,EAAS,EAAK,EAChDmB,EAA0B,IAAM,CACpCD,EAAgB,CAACD,CAAY,CAC/B,EAEMG,EAA2BC,GAAU,CACzCA,EAAM,eAAA,CACR,EAEM,CAACC,CAAY,EAAInB,EAAA,EACjBoB,EAAYD,EAAa,IAAI,MAAM,EAEzC,OACEE,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,EAAAA,KAACE,EAAA,CAAM,GAAI,CAAE,IAAK,GAChB,SAAA,CAAAC,EAAAA,IAACC,EAAA,EAAe,EAChBJ,EAAAA,KAACK,EAAA,CACC,GAAI,CACF,WAAY,SACZ,QAAS,MAAA,EAGX,SAAA,CAAAF,MAACG,GAAQ,GAAI,CAAE,SAAU,CAAA,EAAK,YAAY,aAAa,EAEvDH,EAAAA,IAACI,EAAA,CACC,QAAQ,WACR,GAAI,CACF,OAAQ,QACR,EAAG,EACH,GAAI,GACJ,GAAI,EACJ,YAAa,GAAGzB,EAAM,KAAK,QAAQ,KAAK,GAAG,CAAC,cAC5C,MAAO,GAAGA,EAAM,KAAK,QAAQ,KAAK,GAAG,CAAC,cACtC,WAAY,IACZ,aAAc,GAAGI,CAAY,KAC7B,GAAGJ,EAAM,YAAY,OAAQ,CAC3B,YAAa,GAAG0B,EAAU1B,EAAM,KAAK,QAAQ,KAAK,MAAO,EAAG,CAAC,aAAA,CAC9D,CAAA,EAEH,cAAa,GACb,SAAQ,GACT,SAAA,IAAA,CAAA,EAIDqB,MAACG,GAAQ,GAAI,CAAE,SAAU,CAAA,EAAK,YAAY,YAAA,CAAa,CAAA,CAAA,CAAA,EAEzDH,EAAAA,IAACD,EAAA,CAAM,GAAI,CAAE,GAAI,EAAG,WAAY,QAAA,EAC9B,SAAAC,EAAAA,IAACM,EAAA,CAAW,QAAQ,YAAY,sCAA0B,CAAA,CAC5D,CAAA,EACF,EACAN,EAAAA,IAACO,EAAA,CACC,cAAe,CACb,MAAO,uBACP,SAAU,SACV,OAAQ,IAAA,EAEV,iBAAkBC,EAAI,EAAS,MAAM,CACnC,MAAOC,IAAa,MAAM,uBAAuB,EAAE,IAAI,GAAG,EAAE,SAAS,mBAAmB,EACxF,SAAUA,EAAI,EACX,SAAS,sBAAsB,EAC/B,KACC,iCACA,4CACCC,GAAUA,IAAUA,EAAM,KAAA,CAAK,EAEjC,IAAI,GAAI,0CAA0C,CAAA,CACtD,EACD,SAAU,MAAOC,EAAQ,CAAE,UAAAC,EAAW,UAAAC,EAAW,cAAAC,KAAoB,CACnE,GAAI,CACF,GAAI3B,EAA6B,CAC/B,MAAM4B,EAAeJ,EAAO,MAAM,KAAA,EAClC,MAAMxB,EAA4B4B,EAAcJ,EAAO,QAAQ,EAAE,KAC/D,IAAM,CAKN,EACCK,GAAQ,CACPH,EAAU,CAAE,QAAS,GAAO,EAC5BD,EAAU,CAAE,OAAQI,EAAI,OAAA,CAAS,EACjCF,EAAc,EAAK,CACrB,CAAA,CAEJ,CACF,OAASE,EAAK,CACZ,QAAQ,MAAMA,CAAG,EACbnC,EAAY,UACdgC,EAAU,CAAE,QAAS,GAAO,EAC5BD,EAAU,CAAE,OAAQI,EAAI,OAAA,CAAS,EACjCF,EAAc,EAAK,EAEvB,CACF,EAEC,UAAC,CAAE,OAAAG,EAAQ,WAAAC,EAAY,aAAAC,EAAc,aAAAC,EAAc,aAAAC,EAAc,QAAAC,EAAS,OAAAX,CAAA,WACxE,OAAA,CAAK,WAAU,GAAC,SAAUS,EAAe,GAAG1C,EAC3C,SAAA,CAAAmB,EAAAA,KAAC0B,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQD,EAAQ,OAASL,EAAO,OAClE,SAAA,CAAAjB,EAAAA,IAACwB,EAAA,CAAW,QAAQ,iCAAiC,SAAA,2BAErD,EACAxB,EAAAA,IAACyB,EAAA,CACC,GAAG,iCACH,KAAK,QACL,MAAOd,EAAO,MACd,KAAK,QACL,OAAQO,EACR,SAAUC,EACV,MAAM,0BAAA,CAAA,EAEPG,EAAQ,OAASL,EAAO,OACvBjB,EAAAA,IAAC0B,EAAA,CAAe,MAAK,GAAC,GAAG,0CACtB,SAAAT,EAAO,KAAA,CACV,CAAA,EAEJ,EAEApB,EAAAA,KAAC0B,EAAA,CAAkB,UAAS,GAAC,MAAO,GAAQD,EAAQ,UAAYL,EAAO,UACrE,SAAA,CAAAjB,EAAAA,IAACwB,EAAA,CAAW,QAAQ,oCAAoC,SAAA,WAAQ,EAChExB,EAAAA,IAACyB,EAAA,CACC,GAAG,oCACH,KAAMnC,EAAe,OAAS,WAC9B,MAAOqB,EAAO,SACd,KAAK,WACL,OAAQO,EACR,SAAUC,EACV,aACEnB,EAAAA,IAAC2B,EAAA,CAAe,SAAS,MACvB,SAAA3B,EAAAA,IAAC4B,EAAA,CACC,aAAW,6BACX,QAASpC,EACT,YAAaC,EACb,KAAK,MACL,KAAK,QAEJ,SAAAH,EAAeU,MAAC6B,EAAA,CAAA,CAAW,QAAMC,EAAA,CAAA,CAAc,CAAA,CAAA,EAEpD,EAEF,MAAM,UAAA,CAAA,EAEPR,EAAQ,UAAYL,EAAO,UAC1BjB,EAAAA,IAAC0B,EAAA,CAAe,MAAK,GAAC,GAAG,6CACtB,SAAAT,EAAO,QAAA,CACV,CAAA,EAEJ,EACApB,EAAAA,KAACE,EAAA,CAAM,UAAU,MAAM,GAAI,CAAE,WAAY,SAAU,eAAgB,eAAA,EACjE,SAAA,CAAAC,EAAAA,IAAC+B,EAAA,CACC,QACE/B,EAAAA,IAACgC,EAAA,CACC,QAAA/C,EACA,SAAWS,GAAUR,EAAWQ,EAAM,OAAO,OAAO,EACpD,KAAK,UACL,MAAM,SAAA,CAAA,EAGV,MAAM,aAAA,CAAA,EAERM,EAAAA,IAACM,EAAA,CACC,QAAQ,YACR,UAAW/B,EACX,GACEa,EACI,0CACAQ,EACE,yBAAyBA,CAAS,GAClC,mBAER,GAAI,CAAE,eAAgB,OAAQ,MAAO,gBAAA,EACtC,SAAA,kBAAA,CAAA,CAED,EACF,EACCqB,EAAO,QACNjB,EAAAA,IAACE,EAAA,CAAI,GAAI,CAAE,GAAI,GACb,eAACwB,EAAA,CAAe,MAAK,GAAE,SAAAT,EAAO,OAAO,EACvC,EAGFjB,EAAAA,IAACE,GAAI,GAAI,CAAE,GAAI,GACb,eAAC+B,EAAA,CACC,SAAAjC,EAAAA,IAACI,EAAA,CACC,iBAAgB,GAChB,SAAUiB,EACV,UAAS,GACT,KAAK,QACL,KAAK,SACL,QAAQ,YACR,MAAM,YACP,SAAA,SAAA,CAAA,EAGH,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,EACF,CAEJ"}