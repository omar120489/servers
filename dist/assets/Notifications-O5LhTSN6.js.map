{"version":3,"file":"Notifications-O5LhTSN6.js","sources":["../../node_modules/@tabler/icons-react/dist/esm/icons/IconBellOff.mjs","../../node_modules/@tabler/icons-react/dist/esm/icons/IconExternalLink.mjs","../../src/views/notifications/Notifications.tsx"],"sourcesContent":["/**\n * @license @tabler/icons-react v3.35.0 - MIT\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createReactComponent from '../createReactComponent.mjs';\n\nconst __iconNode = [[\"path\", { \"d\": \"M9.346 5.353c.21 -.129 .428 -.246 .654 -.353a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3m-1 3h-13a4 4 0 0 0 2 -3v-3a6.996 6.996 0 0 1 1.273 -3.707\", \"key\": \"svg-0\" }], [\"path\", { \"d\": \"M9 17v1a3 3 0 0 0 6 0v-1\", \"key\": \"svg-1\" }], [\"path\", { \"d\": \"M3 3l18 18\", \"key\": \"svg-2\" }]];\nconst IconBellOff = createReactComponent(\"outline\", \"bell-off\", \"BellOff\", __iconNode);\n\nexport { __iconNode, IconBellOff as default };\n//# sourceMappingURL=IconBellOff.mjs.map\n","/**\n * @license @tabler/icons-react v3.35.0 - MIT\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createReactComponent from '../createReactComponent.mjs';\n\nconst __iconNode = [[\"path\", { \"d\": \"M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6\", \"key\": \"svg-0\" }], [\"path\", { \"d\": \"M11 13l9 -9\", \"key\": \"svg-1\" }], [\"path\", { \"d\": \"M15 4h5v5\", \"key\": \"svg-2\" }]];\nconst IconExternalLink = createReactComponent(\"outline\", \"external-link\", \"ExternalLink\", __iconNode);\n\nexport { __iconNode, IconExternalLink as default };\n//# sourceMappingURL=IconExternalLink.mjs.map\n","import { memo } from 'react';\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Button,\n  Chip,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  IconButton,\n  List,\n  ListItem,\n  ListItemButton,\n  MenuItem,\n  Pagination,\n  Select,\n  type SelectChangeEvent,\n  Switch,\n  Tooltip,\n  Typography\n} from '@mui/material';\nimport {\n  IconBell,\n  IconBellOff,\n  IconCheck,\n  IconChevronDown,\n  IconExternalLink,\n  IconSettings,\n  IconX\n} from '@tabler/icons-react';\nimport { useNavigate } from 'react-router-dom';\n\nimport AppPage from 'layouts/AppPage';\nimport { useNotifications, type NotificationFilter } from 'hooks/useNotifications';\nimport { useNotificationPreferences, type NotificationType } from 'hooks/useNotificationPreferences';\nimport type { Notification } from 'types/api';\nimport { isNewNotification } from 'utils/notifications';\nimport { track } from 'utils/analytics';\n\n/**\n * Format date string to relative time (e.g., \"2 minutes ago\")\n */\nfunction formatRelativeTime(dateString: string): string {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffMins = Math.floor(diffMs / 60000);\n\n  if (diffMins < 1) return 'Just now';\n  if (diffMins < 60) return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n\n  const diffHours = Math.floor(diffMins / 60);\n  if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n\n  const diffDays = Math.floor(diffHours / 24);\n  if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n\n  return date.toLocaleDateString();\n}\n\n/**\n * Get chip color based on notification type\n */\nfunction getTypeColor(\n  type?: string\n): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' {\n  switch (type) {\n    case 'success':\n      return 'success';\n    case 'error':\n      return 'error';\n    case 'warning':\n      return 'warning';\n    case 'info':\n      return 'info';\n    default:\n      return 'default';\n  }\n}\n\n/**\n * Map entity type to route\n */\nfunction getEntityRoute(entityType?: string, entityId?: string | number): string | null {\n  if (!entityType || !entityId) return null;\n\n  const routeMap: Record<string, string> = {\n    deal: '/deals',\n    lead: '/leads',\n    contact: '/contacts',\n    company: '/companies'\n  };\n\n  const basePath = routeMap[entityType.toLowerCase()];\n  return basePath ? `${basePath}/${entityId}` : null;\n}\n\n/**\n * Individual notification item with action buttons\n */\ninterface NotificationItemProps {\n  readonly notification: Notification;\n  readonly onMarkAsRead: (id: string | number) => Promise<void>;\n  readonly onMarkAsUnread: (id: string | number) => Promise<void>;\n}\n\nfunction InnerNotificationItem({ notification, onMarkAsRead, onMarkAsUnread }: NotificationItemProps) {\n  const navigate = useNavigate();\n  const isNew = isNewNotification(notification.createdAt);\n\n  const handleMainClick = () => {\n    if (!notification.isRead) {\n      void onMarkAsRead(notification.id);\n    }\n  };\n\n  const handleToggleRead = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    if (notification.isRead) {\n      void onMarkAsUnread(notification.id);\n    } else {\n      void onMarkAsRead(notification.id);\n    }\n  };\n\n  const handleNavigate = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    const route = getEntityRoute(notification.entityType, notification.entityId);\n    if (route) {\n      navigate(route);\n    }\n  };\n\n  const entityRoute = getEntityRoute(notification.entityType, notification.entityId);\n\n  return (\n    <>\n      <ListItem disablePadding sx={{ position: 'relative' }}>\n        <ListItemButton onClick={handleMainClick} sx={{ py: 2, pr: 10 }}>\n          <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%', gap: 1 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\n              {!notification.isRead && (\n                <Box\n                  sx={{\n                    width: 8,\n                    height: 8,\n                    borderRadius: '50%',\n                    bgcolor: 'primary.main',\n                    flexShrink: 0\n                  }}\n                />\n              )}\n              <Box sx={{ flex: 1 }}>\n                <Typography\n                  variant=\"subtitle1\"\n                  sx={{\n                    fontWeight: notification.isRead ? 400 : 600,\n                    color: notification.isRead ? 'text.secondary' : 'text.primary'\n                  }}\n                >\n                  {notification.title}\n                </Typography>\n                {notification.message && (\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\n                    {notification.message}\n                  </Typography>\n                )}\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {formatRelativeTime(notification.createdAt)}\n                  </Typography>\n                  {/* Status badges */}\n                  {!notification.isRead && (\n                    <Chip\n                      label=\"Unread\"\n                      size=\"small\"\n                      sx={{\n                        height: 20,\n                        fontSize: '0.7rem',\n                        bgcolor: '#ffebee',\n                        color: '#d32f2f',\n                        fontWeight: 500\n                      }}\n                    />\n                  )}\n                  {isNew && (\n                    <Chip\n                      label=\"New\"\n                      size=\"small\"\n                      sx={{\n                        height: 20,\n                        fontSize: '0.7rem',\n                        bgcolor: '#fff3e0',\n                        color: '#e65100',\n                        fontWeight: 500\n                      }}\n                    />\n                  )}\n                </Box>\n              </Box>\n              {notification.type && (\n                <Chip\n                  label={notification.type}\n                  color={getTypeColor(notification.type)}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  sx={{ textTransform: 'capitalize' }}\n                />\n              )}\n            </Box>\n          </Box>\n        </ListItemButton>\n\n        {/* Action buttons positioned on the right */}\n        <Box\n          sx={{\n            position: 'absolute',\n            right: 16,\n            top: '50%',\n            transform: 'translateY(-50%)',\n            display: 'flex',\n            gap: 0.5\n          }}\n        >\n          <Tooltip title={notification.isRead ? 'Mark as unread' : 'Mark as read'}>\n            <IconButton size=\"small\" onClick={handleToggleRead}>\n              {notification.isRead ? <IconX size={18} /> : <IconCheck size={18} />}\n            </IconButton>\n          </Tooltip>\n\n          {entityRoute && (\n            <Tooltip title={`Open ${notification.entityType || 'entity'}`}>\n              <IconButton size=\"small\" onClick={handleNavigate}>\n                <IconExternalLink size={18} />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Box>\n      </ListItem>\n      <Divider />\n    </>\n  );\n}\n\n/**\n * Memoized NotificationItem to prevent unnecessary re-renders\n * Includes entity comparison to prevent re-renders when entity links change\n */\nconst NotificationItem = memo(InnerNotificationItem, (prev, next) => {\n  const a = prev.notification;\n  const b = next.notification;\n  return (\n    a.id === b.id &&\n    a.isRead === b.isRead &&\n    a.createdAt === b.createdAt &&\n    a.title === b.title &&\n    a.message === b.message &&\n    (a.entityType ?? '') === (b.entityType ?? '') &&\n    (a.entityId ?? '') === (b.entityId ?? '')\n  );\n});\n\n/**\n * Preferences UI component\n */\nfunction NotificationPreferences() {\n  const { mutedTypes, isMuted, toggleMute, muteAll, unmuteAll } = useNotificationPreferences();\n\n  const notificationTypes: Array<{ type: NotificationType; label: string }> = [\n    { type: 'comment', label: 'Comments' },\n    { type: 'attachment', label: 'Attachments' },\n    { type: 'notification', label: 'System Notifications' },\n    { type: 'email', label: 'Emails' },\n    { type: 'mention', label: 'Mentions' }\n  ];\n\n  const allMuted = mutedTypes.length === notificationTypes.length;\n  const noneMuted = mutedTypes.length === 0;\n\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<IconChevronDown />}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <IconSettings size={20} />\n          <Typography variant=\"subtitle1\">Notification Preferences</Typography>\n        </Box>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Choose which types of notifications you want to receive as toasts.\n          </Typography>\n\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n            {notificationTypes.map(({ type, label }) => (\n              <FormControlLabel\n                key={type}\n                control={<Switch checked={!isMuted(type)} onChange={() => toggleMute(type)} />}\n                label={label}\n              />\n            ))}\n          </Box>\n\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={unmuteAll}\n              disabled={noneMuted}\n            >\n              Enable All\n            </Button>\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={muteAll}\n              disabled={allMuted}\n            >\n              Disable All\n            </Button>\n          </Box>\n        </Box>\n      </AccordionDetails>\n    </Accordion>\n  );\n}\n\n/**\n * Notifications Center Page\n *\n * Features:\n * - List all notifications with pagination\n * - Mark individual notification as read/unread\n * - Mark all notifications as read\n * - Navigate to related entity\n * - Notification preferences (mute/unmute types)\n * - Real-time updates via WebSocket\n * - Empty state when no notifications\n * - Loading and error states\n */\nexport default function Notifications() {\n  const navigate = useNavigate();\n  const {\n    paginatedNotifications,\n    filteredNotifications,\n    unreadCount,\n    loading,\n    error,\n    page,\n    totalPages,\n    filter,\n    markAsRead,\n    markAsUnread,\n    markAllAsRead,\n    setPage,\n    setFilter,\n    refresh\n  } = useNotifications();\n\n  // Retry mechanism for error recovery\n  const retry = () => {\n    void refresh();\n  };\n\n  const hasNotifications = paginatedNotifications.length > 0;\n\n  const handlePageChange = (_event: React.ChangeEvent<unknown>, value: number) => {\n    setPage(value);\n  };\n\n  const handleFilterChange = (event: SelectChangeEvent<NotificationFilter>) => {\n    const newFilter = event.target.value as NotificationFilter;\n    setFilter(newFilter);\n    track('notifications_filter_change', { filter: newFilter });\n  };\n\n  const handleMarkAllAsRead = () => {\n    track('notifications_mark_all', { unreadCount });\n    void markAllAsRead();\n  };\n\n  // Extract nested ternary for readability\n  const notificationPlural = unreadCount > 1 ? 's' : '';\n  const unreadText = unreadCount > 0\n    ? `${unreadCount} unread notification${notificationPlural}`\n    : 'All caught up!';\n\n  // Count for current filter\n  const filterCount = filteredNotifications.length;\n\n  // Toolbar: Filter dropdown\n  const toolbar = (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, width: '100%' }}>\n      <NotificationPreferences />\n      \n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 2 }}>\n        {/* Left: Filter dropdown */}\n        <FormControl size=\"small\" sx={{ minWidth: 220 }}>\n          <Select\n            aria-label=\"Filter notifications\"\n            value={filter}\n            onChange={handleFilterChange}\n            displayEmpty\n            sx={{\n              '& .MuiSelect-select': { display: 'flex', alignItems: 'center', gap: 1, py: 1 }\n            }}\n          >\n            <MenuItem value=\"all\">\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, width: '100%' }}>\n                All Notifications\n                {filterCount > 0 && (\n                  <Chip\n                    label={`${filterCount}`.padStart(2, '0')}\n                    size=\"small\"\n                    sx={{\n                      height: 20,\n                      minWidth: 28,\n                      bgcolor: '#ff9800',\n                      color: 'white',\n                      fontWeight: 600,\n                      '& .MuiChip-label': { px: 1 }\n                    }}\n                  />\n                )}\n              </Box>\n            </MenuItem>\n            <MenuItem value=\"new\">New</MenuItem>\n            <MenuItem value=\"unread\">Unread</MenuItem>\n            <MenuItem value=\"other\">Other</MenuItem>\n          </Select>\n        </FormControl>\n        <Box />\n      </Box>\n      \n      <Divider />\n    </Box>\n  );\n\n  // Actions: Mark all as read button\n  const actions = unreadCount > 0 ? (\n    <Button\n      variant=\"text\"\n      size=\"small\"\n      onClick={handleMarkAllAsRead}\n    >\n      Mark all as read\n    </Button>\n  ) : null;\n\n  // Custom empty state\n  const emptySlot = (\n    <Box sx={{ py: 8, textAlign: 'center' }}>\n      <IconBellOff size={64} stroke={1.5} style={{ opacity: 0.3 }} />\n      <Typography variant=\"h4\" color=\"text.secondary\" sx={{ mt: 2 }}>\n        No notifications yet\n      </Typography>\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        You're all caught up! We'll notify you when something new happens.\n      </Typography>\n      <Button\n        variant=\"contained\"\n        sx={{ mt: 2 }}\n        onClick={() => {\n          track('notifications_empty_cta_click', { destination: 'leads/new' });\n          navigate('/leads/new');\n        }}\n      >\n        Create a lead\n      </Button>\n    </Box>\n  );\n\n  // Footer: Pagination\n  const footer = totalPages > 1 ? (\n    <Pagination\n      count={totalPages}\n      page={page}\n      onChange={handlePageChange}\n      color=\"primary\"\n      showFirstButton\n      showLastButton\n    />\n  ) : undefined;\n\n  return (\n    <AppPage\n      title=\"Notifications\"\n      toolbar={toolbar}\n      actions={actions}\n      loading={loading}\n      error={error}\n      empty={!hasNotifications}\n      onRetry={retry}\n      emptySlot={emptySlot}\n      footer={footer}\n      ariaLabel=\"Notifications center\"\n    >\n      {/* Content: Unread count + List */}\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, position: 'relative', mb: 2 }}>\n        <IconBell size={20} />\n        <Typography variant=\"caption\" color=\"text.secondary\">\n          {unreadText}\n        </Typography>\n\n        {/* a11y: live region for screen readers */}\n        <Box\n          sx={{\n            position: 'absolute',\n            width: 1,\n            height: 1,\n            overflow: 'hidden',\n            clip: 'rect(0 0 0 0)'\n          }}\n          aria-live=\"polite\"\n        >\n          {unreadText}\n        </Box>\n      </Box>\n\n      <List sx={{ p: 0 }}>\n        {paginatedNotifications.map((notification) => (\n          <NotificationItem\n            key={notification.id}\n            notification={notification}\n            onMarkAsRead={markAsRead}\n            onMarkAsUnread={markAsUnread}\n          />\n        ))}\n      </List>\n    </AppPage>\n  );\n}\n"],"names":["__iconNode","IconBellOff","createReactComponent","IconExternalLink","memo","importShared","Accordion","AccordionDetails","AccordionSummary","Box","Button","Chip","Divider","FormControl","FormControlLabel","IconButton","List","ListItem","ListItemButton","MenuItem","Pagination","Select","Switch","Tooltip","Typography","useNavigate","formatRelativeTime","dateString","date","diffMs","diffMins","diffHours","diffDays","getTypeColor","type","getEntityRoute","entityType","entityId","basePath","InnerNotificationItem","notification","onMarkAsRead","onMarkAsUnread","navigate","isNew","isNewNotification","handleMainClick","handleToggleRead","event","handleNavigate","route","entityRoute","jsxs","Fragment","jsx","IconX","IconCheck","NotificationItem","prev","next","a","b","NotificationPreferences","mutedTypes","isMuted","toggleMute","muteAll","unmuteAll","useNotificationPreferences","notificationTypes","allMuted","noneMuted","IconChevronDown","IconSettings","label","Notifications","paginatedNotifications","filteredNotifications","unreadCount","loading","error","page","totalPages","filter","markAsRead","markAsUnread","markAllAsRead","setPage","setFilter","refresh","useNotifications","retry","hasNotifications","handlePageChange","_event","value","handleFilterChange","newFilter","handleMarkAllAsRead","notificationPlural","unreadText","filterCount","toolbar","actions","emptySlot","footer","AppPage","IconBell"],"mappings":"ibAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,EAAa,CAAC,CAAC,OAAQ,CAAE,EAAK,uIAAwI,IAAO,OAAO,CAAE,EAAG,CAAC,OAAQ,CAAE,EAAK,2BAA4B,IAAO,QAAS,EAAG,CAAC,OAAQ,CAAE,EAAK,aAAc,IAAO,OAAO,CAAE,CAAC,EACvSC,EAAcC,EAAqB,UAAW,WAAY,UAAWF,CAAU,ECVrF;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,EAAa,CAAC,CAAC,OAAQ,CAAE,EAAK,gEAAiE,IAAO,OAAO,CAAE,EAAG,CAAC,OAAQ,CAAE,EAAK,cAAe,IAAO,QAAS,EAAG,CAAC,OAAQ,CAAE,EAAK,YAAa,IAAO,OAAO,CAAE,CAAC,EAClNG,GAAmBD,EAAqB,UAAW,gBAAiB,eAAgBF,CAAU,ECVpG,CAAA,KAAAI,EAAA,EAAA,MAAAC,EAAA,OAAA,EACA,CAAA,UAAAC,GAAA,iBAAAC,GAAA,iBAAAC,GAAA,IAAAC,EAAA,OAAAC,EAAA,KAAAC,EAAA,QAAAC,EAAA,YAAAC,GAAA,iBAAAC,GAAA,WAAAC,EAAA,KAAAC,GAAA,SAAAC,GAAA,eAAAC,GAAA,SAAAC,EAAA,WAAAC,GAAA,OAAAC,GAAA,OAAAC,GAAA,QAAAC,EAAA,WAAAC,CAAA,EAAA,MAAAnB,EAAA,eAAA,EA+BA,CAAA,YAAAoB,CAAA,EAAA,MAAApB,EAAA,kBAAA,EAYA,SAASqB,GAAmBC,EAA4B,CACtD,MAAMC,EAAO,IAAI,KAAKD,CAAU,EAE1BE,MADU,KAAA,EACG,QAAA,EAAYD,EAAK,QAAA,EAC9BE,EAAW,KAAK,MAAMD,EAAS,GAAK,EAE1C,GAAIC,EAAW,EAAG,MAAO,WACzB,GAAIA,EAAW,GAAI,MAAO,GAAGA,CAAQ,UAAUA,EAAW,EAAI,IAAM,EAAE,OAEtE,MAAMC,EAAY,KAAK,MAAMD,EAAW,EAAE,EAC1C,GAAIC,EAAY,GAAI,MAAO,GAAGA,CAAS,QAAQA,EAAY,EAAI,IAAM,EAAE,OAEvE,MAAMC,EAAW,KAAK,MAAMD,EAAY,EAAE,EAC1C,OAAIC,EAAW,EAAU,GAAGA,CAAQ,OAAOA,EAAW,EAAI,IAAM,EAAE,OAE3DJ,EAAK,mBAAA,CACd,CAKA,SAASK,GACPC,EACgF,CAChF,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,UACT,IAAK,QACH,MAAO,QACT,IAAK,UACH,MAAO,UACT,IAAK,OACH,MAAO,OACT,QACE,MAAO,SAAA,CAEb,CAKA,SAASC,EAAeC,EAAqBC,EAA2C,CACtF,GAAI,CAACD,GAAc,CAACC,EAAU,OAAO,KASrC,MAAMC,EAPmC,CACvC,KAAM,SACN,KAAM,SACN,QAAS,YACT,QAAS,YAAA,EAGeF,EAAW,YAAA,CAAa,EAClD,OAAOE,EAAW,GAAGA,CAAQ,IAAID,CAAQ,GAAK,IAChD,CAWA,SAASE,GAAsB,CAAE,aAAAC,EAAc,aAAAC,EAAc,eAAAC,GAAyC,CACpG,MAAMC,EAAWlB,EAAA,EACXmB,EAAQC,EAAkBL,EAAa,SAAS,EAEhDM,EAAkB,IAAM,CACvBN,EAAa,QACXC,EAAaD,EAAa,EAAE,CAErC,EAEMO,EAAoBC,GAA4B,CACpDA,EAAM,gBAAA,EACFR,EAAa,OACVE,EAAeF,EAAa,EAAE,EAE9BC,EAAaD,EAAa,EAAE,CAErC,EAEMS,EAAkBD,GAA4B,CAClDA,EAAM,gBAAA,EACN,MAAME,EAAQf,EAAeK,EAAa,WAAYA,EAAa,QAAQ,EACvEU,GACFP,EAASO,CAAK,CAElB,EAEMC,EAAchB,EAAeK,EAAa,WAAYA,EAAa,QAAQ,EAEjF,OACEY,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,OAACnC,IAAS,eAAc,GAAC,GAAI,CAAE,SAAU,YACvC,SAAA,CAAAqC,EAAAA,IAACpC,GAAA,CAAe,QAAS4B,EAAiB,GAAI,CAAE,GAAI,EAAG,GAAI,EAAA,EACzD,SAAAQ,MAAC7C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,MAAO,OAAQ,IAAK,CAAA,EACvE,SAAA2C,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,KACpD,SAAA,CAAA,CAAC+B,EAAa,QACbc,EAAAA,IAAC7C,EAAA,CACC,GAAI,CACF,MAAO,EACP,OAAQ,EACR,aAAc,MACd,QAAS,eACT,WAAY,CAAA,CACd,CAAA,SAGHA,EAAA,CAAI,GAAI,CAAE,KAAM,GACf,SAAA,CAAA6C,EAAAA,IAAC9B,EAAA,CACC,QAAQ,YACR,GAAI,CACF,WAAYgB,EAAa,OAAS,IAAM,IACxC,MAAOA,EAAa,OAAS,iBAAmB,cAAA,EAGjD,SAAAA,EAAa,KAAA,CAAA,EAEfA,EAAa,SACZc,EAAAA,IAAC9B,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,EAAA,EAC1D,WAAa,QAChB,EAEF4B,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,GAAI,EAAA,EAC5D,SAAA,CAAA6C,EAAAA,IAAC9B,EAAA,CAAW,QAAQ,UAAU,MAAM,iBACjC,SAAAE,GAAmBc,EAAa,SAAS,CAAA,CAC5C,EAEC,CAACA,EAAa,QACbc,EAAAA,IAAC3C,EAAA,CACC,MAAM,SACN,KAAK,QACL,GAAI,CACF,OAAQ,GACR,SAAU,SACV,QAAS,UACT,MAAO,UACP,WAAY,GAAA,CACd,CAAA,EAGHiC,GACCU,EAAAA,IAAC3C,EAAA,CACC,MAAM,MACN,KAAK,QACL,GAAI,CACF,OAAQ,GACR,SAAU,SACV,QAAS,UACT,MAAO,UACP,WAAY,GAAA,CACd,CAAA,CACF,CAAA,CAEJ,CAAA,EACF,EACC6B,EAAa,MACZc,EAAAA,IAAC3C,EAAA,CACC,MAAO6B,EAAa,KACpB,MAAOP,GAAaO,EAAa,IAAI,EACrC,QAAQ,WACR,KAAK,QACL,GAAI,CAAE,cAAe,YAAA,CAAa,CAAA,CACpC,CAAA,CAEJ,EACF,EACF,EAGAY,EAAAA,KAAC3C,EAAA,CACC,GAAI,CACF,SAAU,WACV,MAAO,GACP,IAAK,MACL,UAAW,mBACX,QAAS,OACT,IAAK,EAAA,EAGP,SAAA,CAAA6C,EAAAA,IAAC/B,EAAA,CAAQ,MAAOiB,EAAa,OAAS,iBAAmB,eACvD,SAAAc,EAAAA,IAACvC,EAAA,CAAW,KAAK,QAAQ,QAASgC,EAC/B,WAAa,OAASO,EAAAA,IAACC,EAAA,CAAM,KAAM,EAAA,CAAI,QAAMC,EAAA,CAAU,KAAM,EAAA,CAAI,CAAA,CACpE,CAAA,CACF,EAECL,SACE5B,EAAA,CAAQ,MAAO,QAAQiB,EAAa,YAAc,QAAQ,GACzD,SAAAc,EAAAA,IAACvC,GAAW,KAAK,QAAQ,QAASkC,EAChC,SAAAK,MAACnD,IAAiB,KAAM,EAAA,CAAI,EAC9B,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,EACF,QACCS,EAAA,CAAA,CAAQ,CAAA,EACX,CAEJ,CAMA,MAAM6C,GAAmBrD,GAAKmC,GAAuB,CAACmB,EAAMC,IAAS,CACnE,MAAMC,EAAIF,EAAK,aACTG,EAAIF,EAAK,aACf,OACEC,EAAE,KAAOC,EAAE,IACXD,EAAE,SAAWC,EAAE,QACfD,EAAE,YAAcC,EAAE,WAClBD,EAAE,QAAUC,EAAE,OACdD,EAAE,UAAYC,EAAE,UACfD,EAAE,YAAc,OAASC,EAAE,YAAc,MACzCD,EAAE,UAAY,OAASC,EAAE,UAAY,GAE1C,CAAC,EAKD,SAASC,IAA0B,CACjC,KAAM,CAAE,WAAAC,EAAY,QAAAC,EAAS,WAAAC,EAAY,QAAAC,EAAS,UAAAC,CAAA,EAAcC,EAAA,EAE1DC,EAAsE,CAC1E,CAAE,KAAM,UAAW,MAAO,UAAA,EAC1B,CAAE,KAAM,aAAc,MAAO,aAAA,EAC7B,CAAE,KAAM,eAAgB,MAAO,sBAAA,EAC/B,CAAE,KAAM,QAAS,MAAO,QAAA,EACxB,CAAE,KAAM,UAAW,MAAO,UAAA,CAAW,EAGjCC,EAAWP,EAAW,SAAWM,EAAkB,OACnDE,EAAYR,EAAW,SAAW,EAExC,cACGzD,GAAA,CACC,SAAA,CAAAgD,MAAC9C,GAAA,CAAiB,WAAY8C,EAAAA,IAACkB,EAAA,CAAA,CAAgB,EAC7C,SAAApB,OAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,GACrD,SAAA,CAAA6C,EAAAA,IAACmB,EAAA,CAAa,KAAM,EAAA,CAAI,EACxBnB,EAAAA,IAAC9B,EAAA,CAAW,QAAQ,YAAY,SAAA,0BAAA,CAAwB,CAAA,CAAA,CAC1D,CAAA,CACF,EACA8B,EAAAA,IAAC/C,GAAA,CACC,SAAA6C,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,CAAA,EACxD,SAAA,CAAA6C,MAAC9B,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,qEAEnD,QAECf,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,CAAA,EACvD,SAAA4D,EAAkB,IAAI,CAAC,CAAE,KAAAnC,EAAM,MAAAwC,KAC9BpB,EAAAA,IAACxC,GAAA,CAEC,QAASwC,EAAAA,IAAChC,GAAA,CAAO,QAAS,CAAC0C,EAAQ9B,CAAI,EAAG,SAAU,IAAM+B,EAAW/B,CAAI,CAAA,CAAG,EAC5E,MAAAwC,CAAA,EAFKxC,CAAA,CAIR,EACH,EAEAkB,OAAC3C,GAAI,GAAI,CAAE,QAAS,OAAQ,IAAK,GAC/B,SAAA,CAAA6C,EAAAA,IAAC5C,EAAA,CACC,KAAK,QACL,QAAQ,WACR,QAASyD,EACT,SAAUI,EACX,SAAA,YAAA,CAAA,EAGDjB,EAAAA,IAAC5C,EAAA,CACC,KAAK,QACL,QAAQ,WACR,MAAM,YACN,QAASwD,EACT,SAAUI,EACX,SAAA,aAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAEJ,CAeA,SAAwBK,IAAgB,CACtC,MAAMhC,EAAWlB,EAAA,EACX,CACJ,uBAAAmD,EACA,sBAAAC,EACA,YAAAC,EACA,QAAAC,EACA,MAAAC,EACA,KAAAC,EACA,WAAAC,EACA,OAAAC,EACA,WAAAC,EACA,aAAAC,EACA,cAAAC,EACA,QAAAC,EACA,UAAAC,EACA,QAAAC,CAAA,EACEC,EAAA,EAGEC,EAAQ,IAAM,CACbF,EAAA,CACP,EAEMG,EAAmBhB,EAAuB,OAAS,EAEnDiB,EAAmB,CAACC,EAAoCC,IAAkB,CAC9ER,EAAQQ,CAAK,CACf,EAEMC,EAAsBhD,GAAiD,CAC3E,MAAMiD,EAAYjD,EAAM,OAAO,MAC/BwC,EAAUS,CAAS,CAErB,EAEMC,EAAsB,IAAM,CAE3BZ,EAAA,CACP,EAGMa,EAAqBrB,EAAc,EAAI,IAAM,GAC7CsB,EAAatB,EAAc,EAC7B,GAAGA,CAAW,uBAAuBqB,CAAkB,GACvD,iBAGEE,EAAcxB,EAAsB,OAGpCyB,EACJlD,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,EAAG,MAAO,QAClE,SAAA,CAAA6C,EAAAA,IAACQ,GAAA,EAAwB,EAEzBV,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,eAAgB,gBAAiB,WAAY,SAAU,IAAK,CAAA,EAEtF,SAAA,CAAA6C,MAACzC,IAAY,KAAK,QAAQ,GAAI,CAAE,SAAU,KACxC,SAAAuC,EAAAA,KAAC/B,GAAA,CACC,aAAW,uBACX,MAAO8D,EACP,SAAUa,EACV,aAAY,GACZ,GAAI,CACF,sBAAuB,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,GAAI,CAAA,CAAE,EAGhF,SAAA,CAAA1C,MAACnC,EAAA,CAAS,MAAM,MACd,SAAAiC,EAAAA,KAAC3C,GAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,MAAO,QAAU,SAAA,CAAA,oBAExE4F,EAAc,GACb/C,EAAAA,IAAC3C,EAAA,CACC,MAAO,GAAG0F,CAAW,GAAG,SAAS,EAAG,GAAG,EACvC,KAAK,QACL,GAAI,CACF,OAAQ,GACR,SAAU,GACV,QAAS,UACT,MAAO,QACP,WAAY,IACZ,mBAAoB,CAAE,GAAI,CAAA,CAAE,CAC9B,CAAA,CACF,CAAA,CAEJ,CAAA,CACF,EACA/C,EAAAA,IAACnC,EAAA,CAAS,MAAM,MAAM,SAAA,MAAG,EACzBmC,EAAAA,IAACnC,EAAA,CAAS,MAAM,SAAS,SAAA,SAAM,EAC/BmC,EAAAA,IAACnC,EAAA,CAAS,MAAM,QAAQ,SAAA,OAAA,CAAK,CAAA,CAAA,CAAA,EAEjC,QACCV,EAAA,CAAA,CAAI,CAAA,EACP,QAECG,EAAA,CAAA,CAAQ,CAAA,EACX,EAII2F,EAAUzB,EAAc,EAC5BxB,EAAAA,IAAC5C,EAAA,CACC,QAAQ,OACR,KAAK,QACL,QAASwF,EACV,SAAA,kBAAA,CAAA,EAGC,KAGEM,SACH/F,EAAA,CAAI,GAAI,CAAE,GAAI,EAAG,UAAW,QAAA,EAC3B,SAAA,CAAA6C,EAAAA,IAACrD,EAAA,CAAY,KAAM,GAAI,OAAQ,IAAK,MAAO,CAAE,QAAS,EAAA,CAAI,CAAG,EAC7DqD,EAAAA,IAAC9B,EAAA,CAAW,QAAQ,KAAK,MAAM,iBAAiB,GAAI,CAAE,GAAI,CAAA,EAAK,SAAA,sBAAA,CAE/D,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,qEAEnD,EACA8B,EAAAA,IAAC5C,EAAA,CACC,QAAQ,YACR,GAAI,CAAE,GAAI,CAAA,EACV,QAAS,IAAM,CAEbiC,EAAS,YAAY,CACvB,EACD,SAAA,eAAA,CAAA,CAED,EACF,EAII8D,EAASvB,EAAa,EAC1B5B,EAAAA,IAAClC,GAAA,CACC,MAAO8D,EACP,KAAAD,EACA,SAAUY,EACV,MAAM,UACN,gBAAe,GACf,eAAc,EAAA,CAAA,EAEd,OAEJ,OACEzC,EAAAA,KAACsD,EAAA,CACC,MAAM,gBACN,QAAAJ,EACA,QAAAC,EACA,QAAAxB,EACA,MAAAC,EACA,MAAO,CAACY,EACR,QAASD,EACT,UAAAa,EACA,OAAAC,EACA,UAAU,uBAGV,SAAA,CAAArD,EAAAA,KAAC3C,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,EAAG,SAAU,WAAY,GAAI,GAClF,SAAA,CAAA6C,EAAAA,IAACqD,EAAA,CAAS,KAAM,EAAA,CAAI,QACnBnF,EAAA,CAAW,QAAQ,UAAU,MAAM,iBACjC,SAAA4E,EACH,EAGA9C,EAAAA,IAAC7C,EAAA,CACC,GAAI,CACF,SAAU,WACV,MAAO,EACP,OAAQ,EACR,SAAU,SACV,KAAM,eAAA,EAER,YAAU,SAET,SAAA2F,CAAA,CAAA,CACH,EACF,EAEA9C,EAAAA,IAACtC,GAAA,CAAK,GAAI,CAAE,EAAG,GACZ,SAAA4D,EAAuB,IAAKpC,GAC3Bc,EAAAA,IAACG,GAAA,CAEC,aAAAjB,EACA,aAAc4C,EACd,eAAgBC,CAAA,EAHX7C,EAAa,EAAA,CAKrB,CAAA,CACH,CAAA,CAAA,CAAA,CAGN","x_google_ignoreList":[0,1]}