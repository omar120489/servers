{"version":3,"file":"NoSsr-CMoFUGFE.js","sources":["../../node_modules/@mui/material/esm/styles/useThemeProps.js","../../node_modules/@mui/material/esm/NoSsr/NoSsr.js"],"sourcesContent":["'use client';\n\nimport systemUseThemeProps from '@mui/system/useThemeProps';\nimport defaultTheme from \"./defaultTheme.js\";\nimport THEME_ID from \"./identifier.js\";\nexport default function useThemeProps({\n  props,\n  name\n}) {\n  return systemUseThemeProps({\n    props,\n    name,\n    defaultTheme,\n    themeId: THEME_ID\n  });\n}","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport exactProp from '@mui/utils/exactProp';\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n *\n * * Escape hatch for broken dependencies not supporting SSR.\n * * Improve the time-to-first paint on the client by only rendering above the fold.\n * * Reduce the rendering time on the server.\n * * Under too heavy server load, you can turn on service degradation.\n *\n * Demos:\n *\n * - [No SSR](https://mui.com/material-ui/react-no-ssr/)\n *\n * API:\n *\n * - [NoSsr API](https://mui.com/material-ui/api/no-ssr/)\n */\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n\n  // TODO casting won't be needed at one point https://github.com/DefinitelyTyped/DefinitelyTyped/pull/65135\n  return mountedState ? children : fallback;\n}\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   * @default false\n   */\n  defer: PropTypes.bool,\n  /**\n   * The fallback content to display.\n   * @default null\n   */\n  fallback: PropTypes.node\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\nexport default NoSsr;"],"names":["useThemeProps","props","name","systemUseThemeProps","defaultTheme","THEME_ID","React","importShared","NoSsr","children","defer","fallback","mountedState","setMountedState","useEnhancedEffect"],"mappings":"gLAKe,SAASA,EAAc,CACpC,MAAAC,EACA,KAAAC,CACF,EAAG,CACD,OAAOC,EAAoB,CACzB,MAAAF,EACA,KAAAC,EACA,aAAAE,EACA,QAASC,CACb,CAAG,CACH,CCbA,MAAAC,EAAA,MAAAC,EAAA,OAAA,EAsBA,SAASC,EAAMP,EAAO,CACpB,KAAM,CACJ,SAAAQ,EACA,MAAAC,EAAQ,GACR,SAAAC,EAAW,IAAA,EACTV,EACE,CAACW,EAAcC,CAAe,EAAIP,EAAM,SAAS,EAAK,EAC5D,OAAAQ,EAAkB,IAAM,CACjBJ,GACHG,EAAgB,EAAI,CAExB,EAAG,CAACH,CAAK,CAAC,EACVJ,EAAM,UAAU,IAAM,CAChBI,GACFG,EAAgB,EAAI,CAExB,EAAG,CAACH,CAAK,CAAC,EAGHE,EAAeH,EAAWE,CACnC","x_google_ignoreList":[0,1]}