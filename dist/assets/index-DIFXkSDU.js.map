{"version":3,"file":"index-DIFXkSDU.js","sources":["../../node_modules/@mui/system/esm/useMediaQuery/useMediaQuery.js","../../node_modules/@mui/material/esm/useMediaQuery/index.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { getThemeProps } from \"../useThemeProps/index.js\";\nimport useTheme from \"../useThemeWithoutDefault/index.js\";\n// TODO React 17: Remove `useMediaQueryOld` once React 17 support is removed\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && matchMedia) {\n      return matchMedia(query).matches;\n    }\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    }\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    if (!matchMedia) {\n      return undefined;\n    }\n    const queryList = matchMedia(query);\n    const updateMatch = () => {\n      setMatch(queryList.matches);\n    };\n    updateMatch();\n    queryList.addEventListener('change', updateMatch);\n    return () => {\n      queryList.removeEventListener('change', updateMatch);\n    };\n  }, [query, matchMedia]);\n  return match;\n}\n\n// See https://github.com/mui/material-ui/issues/41190#issuecomment-2040873379 for why\nconst safeReact = {\n  ...React\n};\nconst maybeReactUseSyncExternalStore = safeReact.useSyncExternalStore;\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (noSsr && matchMedia) {\n      return () => matchMedia(query).matches;\n    }\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      mediaQueryList.addEventListener('change', notify);\n      return () => {\n        mediaQueryList.removeEventListener('change', notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_createUseMediaQuery(params = {}) {\n  const {\n    themeId\n  } = params;\n  return function useMediaQuery(queryInput, options = {}) {\n    let theme = useTheme();\n    if (theme && themeId) {\n      theme = theme[themeId] || theme;\n    }\n    // Wait for jsdom to support the match media feature.\n    // All the browsers MUI support have this built-in.\n    // This defensive check is here for simplicity.\n    // Most of the time, the match media logic isn't central to people tests.\n    const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n    const {\n      defaultMatches = false,\n      matchMedia = supportMatchMedia ? window.matchMedia : null,\n      ssrMatchMedia = null,\n      noSsr = false\n    } = getThemeProps({\n      name: 'MuiUseMediaQuery',\n      props: options,\n      theme\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof queryInput === 'function' && theme === null) {\n        console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n      }\n    }\n    let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n    query = query.replace(/^@media( ?)/m, '');\n    if (query.includes('print')) {\n      console.warn([`MUI: You have provided a \\`print\\` query to the \\`useMediaQuery\\` hook.`, 'Using the print media query to modify print styles can lead to unexpected results.', 'Consider using the `displayPrint` field in the `sx` prop instead.', 'More information about `displayPrint` on our docs: https://mui.com/system/display/#display-in-print.'].join('\\n'));\n    }\n    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n    const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      React.useDebugValue({\n        query,\n        match\n      });\n    }\n    return match;\n  };\n}\nconst useMediaQuery = unstable_createUseMediaQuery();\nexport default useMediaQuery;","import { unstable_createUseMediaQuery } from '@mui/system/useMediaQuery';\nimport THEME_ID from \"../styles/identifier.js\";\nconst useMediaQuery = unstable_createUseMediaQuery({\n  themeId: THEME_ID\n});\nexport default useMediaQuery;"],"names":["React","importShared","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","match","setMatch","useEnhancedEffect","queryList","updateMatch","safeReact","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","matches","getSnapshot","subscribe","mediaQueryList","notify","unstable_createUseMediaQuery","params","themeId","queryInput","options","theme","useTheme","supportMatchMedia","getThemeProps","useMediaQuery","THEME_ID"],"mappings":"gLAEA,MAAAA,EAAA,MAAAC,EAAA,OAAA,EAKA,SAASC,EAAiBC,EAAOC,EAAgBC,EAAYC,EAAeC,EAAO,CACjF,KAAM,CAACC,EAAOC,CAAQ,EAAIT,EAAM,SAAS,IACnCO,GAASF,EACJA,EAAWF,CAAK,EAAE,QAEvBG,EACKA,EAAcH,CAAK,EAAE,QAKvBC,CACR,EACD,OAAAM,EAAkB,IAAM,CACtB,GAAI,CAACL,EACH,OAEF,MAAMM,EAAYN,EAAWF,CAAK,EAC5BS,EAAc,IAAM,CACxBH,EAASE,EAAU,OAAO,CAC5B,EACA,OAAAC,EAAA,EACAD,EAAU,iBAAiB,SAAUC,CAAW,EACzC,IAAM,CACXD,EAAU,oBAAoB,SAAUC,CAAW,CACrD,CACF,EAAG,CAACT,EAAOE,CAAU,CAAC,EACfG,CACT,CAGA,MAAMK,EAAY,CAChB,GAAGb,CACL,EACMc,EAAiCD,EAAU,qBACjD,SAASE,EAAiBZ,EAAOC,EAAgBC,EAAYC,EAAeC,EAAO,CACjF,MAAMS,EAAqBhB,EAAM,YAAY,IAAMI,EAAgB,CAACA,CAAc,CAAC,EAC7Ea,EAAoBjB,EAAM,QAAQ,IAAM,CAC5C,GAAIO,GAASF,EACX,MAAO,IAAMA,EAAWF,CAAK,EAAE,QAEjC,GAAIG,IAAkB,KAAM,CAC1B,KAAM,CACJ,QAAAY,CAAA,EACEZ,EAAcH,CAAK,EACvB,MAAO,IAAMe,CACf,CACA,OAAOF,CACT,EAAG,CAACA,EAAoBb,EAAOG,EAAeC,EAAOF,CAAU,CAAC,EAC1D,CAACc,EAAaC,CAAS,EAAIpB,EAAM,QAAQ,IAAM,CACnD,GAAIK,IAAe,KACjB,MAAO,CAACW,EAAoB,IAAM,IAAM,CAAC,CAAC,EAE5C,MAAMK,EAAiBhB,EAAWF,CAAK,EACvC,MAAO,CAAC,IAAMkB,EAAe,QAASC,IACpCD,EAAe,iBAAiB,SAAUC,CAAM,EACzC,IAAM,CACXD,EAAe,oBAAoB,SAAUC,CAAM,CACrD,EACD,CACH,EAAG,CAACN,EAAoBX,EAAYF,CAAK,CAAC,EAE1C,OADcW,EAA+BM,EAAWD,EAAaF,CAAiB,CAExF,CAGO,SAASM,EAA6BC,EAAS,GAAI,CACxD,KAAM,CACJ,QAAAC,CAAA,EACED,EACJ,OAAO,SAAuBE,EAAYC,EAAU,CAAA,EAAI,CACtD,IAAIC,EAAQC,EAAA,EACRD,GAASH,IACXG,EAAQA,EAAMH,CAAO,GAAKG,GAM5B,MAAME,EAAoB,OAAO,OAAW,KAAe,OAAO,OAAO,WAAe,IAClF,CACJ,eAAA1B,EAAiB,GACjB,WAAAC,EAAayB,EAAoB,OAAO,WAAa,KACrD,cAAAxB,EAAgB,KAChB,MAAAC,EAAQ,EAAA,EACNwB,EAAc,CAChB,KAAM,mBACN,MAAOJ,EACP,MAAAC,CAAA,CACD,EAMD,IAAIzB,EAAQ,OAAOuB,GAAe,WAAaA,EAAWE,CAAK,EAAIF,EACnE,OAAAvB,EAAQA,EAAM,QAAQ,eAAgB,EAAE,EACpCA,EAAM,SAAS,OAAO,GACxB,QAAQ,KAAK,CAAC,sEAA2E,qFAAsF,oEAAqE,sGAAsG,EAAE,KAAK;AAAA,CAAI,CAAC,GAEpUW,IAAmC,OAAYC,EAAmBb,GAC5DC,EAAOC,EAAgBC,EAAYC,EAAeC,CAAK,CASnG,CACF,CACsBgB,EAAA,ECrHjB,MAACS,EAAgBT,EAA6B,CACjD,QAASU,CACX,CAAC","x_google_ignoreList":[0,1]}