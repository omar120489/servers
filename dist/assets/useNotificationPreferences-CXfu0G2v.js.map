{"version":3,"file":"useNotificationPreferences-CXfu0G2v.js","sources":["../../node_modules/@tabler/icons-react/dist/esm/icons/IconBell.mjs","../../node_modules/@tabler/icons-react/dist/esm/icons/IconSettings.mjs","../../src/services/notifications.ts","../../src/utils/notifications.ts","../../src/hooks/useNotifications.ts","../../src/hooks/useNotificationPreferences.ts"],"sourcesContent":["/**\n * @license @tabler/icons-react v3.35.0 - MIT\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createReactComponent from '../createReactComponent.mjs';\n\nconst __iconNode = [[\"path\", { \"d\": \"M10 5a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6\", \"key\": \"svg-0\" }], [\"path\", { \"d\": \"M9 17v1a3 3 0 0 0 6 0v-1\", \"key\": \"svg-1\" }]];\nconst IconBell = createReactComponent(\"outline\", \"bell\", \"Bell\", __iconNode);\n\nexport { __iconNode, IconBell as default };\n//# sourceMappingURL=IconBell.mjs.map\n","/**\n * @license @tabler/icons-react v3.35.0 - MIT\n *\n * This source code is licensed under the MIT license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createReactComponent from '../createReactComponent.mjs';\n\nconst __iconNode = [[\"path\", { \"d\": \"M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z\", \"key\": \"svg-0\" }], [\"path\", { \"d\": \"M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\", \"key\": \"svg-1\" }]];\nconst IconSettings = createReactComponent(\"outline\", \"settings\", \"Settings\", __iconNode);\n\nexport { __iconNode, IconSettings as default };\n//# sourceMappingURL=IconSettings.mjs.map\n","import { apiGet, apiPost, apiPatch } from 'utils/axios';\nimport type { Notification, NotificationCreateDto, NotificationListResponse } from 'types/api';\n\n/**\n * Map backend snake_case notification to frontend camelCase\n */\nfunction mapNotificationFromDto(dto: Record<string, unknown>): Notification {\n  return {\n    id: dto.id as string,\n    title: dto.title as string,\n    message: dto.message as string | undefined,\n    type: dto.type as 'info' | 'success' | 'warning' | 'error' | undefined,\n    isRead: dto.is_read as boolean,\n    userId: dto.user_id as string | undefined,\n    entityType: dto.entity_type as string | undefined,\n    entityId: dto.entity_id as string | number | undefined,\n    createdAt: dto.created_at as string,\n    updatedAt: dto.updated_at as string\n  };\n}\n\n/**\n * Map frontend camelCase notification to backend snake_case\n */\nfunction mapNotificationToDto(notification: NotificationCreateDto): Record<string, unknown> {\n  return {\n    title: notification.title,\n    message: notification.message,\n    type: notification.type,\n    entity_type: notification.entityType,\n    entity_id: notification.entityId\n  };\n}\n\n/**\n * List all notifications for the current user\n */\nexport async function listNotifications(): Promise<NotificationListResponse> {\n  const response = await apiGet<{ items: Record<string, unknown>[]; total: number }>(\n    '/api/v1/notifications'\n  );\n  return {\n    items: response.items.map(mapNotificationFromDto),\n    total: response.total\n  };\n}\n\n/**\n * Create a new notification\n */\nexport async function createNotification(payload: NotificationCreateDto): Promise<Notification> {\n  const dto = mapNotificationToDto(payload);\n  const response = await apiPost<Record<string, unknown>>('/api/v1/notifications', dto);\n  return mapNotificationFromDto(response);\n}\n\n/**\n * Mark a notification as read\n */\nexport async function markAsRead(id: string | number): Promise<Notification> {\n  const response = await apiPatch<Record<string, unknown>>(\n    `/api/v1/notifications/${id}/read`,\n    {}\n  );\n  return mapNotificationFromDto(response);\n}\n\n/**\n * Mark all notifications as read\n */\nexport async function markAllAsRead(): Promise<void> {\n  await apiPatch('/api/v1/notifications/mark-all-read', {});\n}\n\nexport const notificationsService = {\n  listNotifications,\n  createNotification,\n  markAsRead,\n  markAllAsRead\n};\n\n","/**\n * Check if a notification is \"new\" (created within the specified time window)\n * @param iso ISO 8601 date string\n * @param windowMs Time window in milliseconds (default: 24 hours)\n * @returns true if the notification is within the time window\n */\nexport const isNewNotification = (iso: string, windowMs = 24 * 60 * 60 * 1000): boolean => {\n  const created = new Date(iso).getTime();\n  return Number.isFinite(created) && Date.now() - created <= windowMs;\n};\n\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { notificationsService } from 'services/notifications';\nimport type { Notification, NotificationListResponse } from 'types/api';\nimport { useWebSocketEvents } from './useWebSocketEvents';\nimport { isNewNotification } from 'utils/notifications';\n\nexport type NotificationFilter = 'all' | 'new' | 'unread' | 'other';\n\ninterface UseNotificationsResult {\n  notifications: Notification[];\n  filteredNotifications: Notification[];\n  paginatedNotifications: Notification[];\n  unreadCount: number;\n  loading: boolean;\n  error: unknown;\n  page: number;\n  pageSize: number;\n  totalPages: number;\n  filter: NotificationFilter;\n  refresh: () => Promise<void>;\n  markAsRead: (id: string | number) => Promise<void>;\n  markAsUnread: (id: string | number) => Promise<void>;\n  markAllAsRead: () => Promise<void>;\n  setPage: (page: number) => void;\n  setPageSize: (size: number) => void;\n  setFilter: (filter: NotificationFilter) => void;\n}\n\n/**\n * Hook to manage notifications with WebSocket real-time updates\n *\n * Features:\n * - Auto-load notifications on mount\n * - Compute unread count from state\n * - Subscribe to `notification:new` WebSocket event\n * - Optimistic updates for mark-as-read operations\n *\n * @example\n * ```tsx\n * const { notifications, unreadCount, markAsRead } = useNotifications();\n *\n * return (\n *   <div>\n *     <Badge badgeContent={unreadCount} color=\"error\">\n *       <NotificationsIcon />\n *     </Badge>\n *     {notifications.map(notif => (\n *       <div key={notif.id} onClick={() => markAsRead(notif.id)}>\n *         {notif.title}\n *       </div>\n *     ))}\n *   </div>\n * );\n * ```\n */\nexport function useNotifications(): UseNotificationsResult {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<unknown>(null);\n  const [page, setPage] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number>(10);\n  const [filter, setFilter] = useState<NotificationFilter>('all');\n\n  const { subscribe } = useWebSocketEvents();\n\n  // Compute unread count\n  const unreadCount = useMemo(() => {\n    return notifications.filter((n) => !n.isRead).length;\n  }, [notifications]);\n\n  // Filter notifications based on selected filter\n  const filteredNotifications = useMemo(() => {\n    switch (filter) {\n      case 'new':\n        // New notifications (last 24 hours)\n        return notifications.filter((n) => isNewNotification(n.createdAt));\n      case 'unread':\n        // Unread notifications only\n        return notifications.filter((n) => !n.isRead);\n      case 'other':\n        // Read and older than 24 hours\n        return notifications.filter((n) => n.isRead || !isNewNotification(n.createdAt));\n      case 'all':\n      default:\n        // All notifications\n        return notifications;\n    }\n  }, [notifications, filter]);\n\n  // Compute total pages based on filtered results\n  const totalPages = useMemo(() => {\n    return Math.ceil(filteredNotifications.length / pageSize);\n  }, [filteredNotifications.length, pageSize]);\n\n  // Compute paginated notifications for current page\n  const paginatedNotifications = useMemo(() => {\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return filteredNotifications.slice(startIndex, endIndex);\n  }, [filteredNotifications, page, pageSize]);\n\n  // Load notifications from API\n  const load = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response: NotificationListResponse = await notificationsService.listNotifications();\n      setNotifications(response.items);\n      setError(null);\n    } catch (err) {\n      setError(err);\n      console.error('[useNotifications] Failed to load notifications:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Auto-load on mount\n  useEffect(() => {\n    void load();\n  }, [load]);\n\n  // Subscribe to new notification events via WebSocket\n  useEffect(() => {\n    const unsubscribe = subscribe('notification:new', (data) => {\n      try {\n        const newNotification = data as Notification;\n        setNotifications((prev) => [newNotification, ...prev]);\n      } catch (err) {\n        console.error('[useNotifications] Failed to handle notification:new event:', err);\n      }\n    });\n\n    return unsubscribe;\n  }, [subscribe]);\n\n  // Subscribe to notification read events\n  useEffect(() => {\n    const markNotificationAsRead = (id: string | number) => {\n      setNotifications((prev) =>\n        prev.map((notif) => (notif.id === id ? { ...notif, isRead: true } : notif))\n      );\n    };\n\n    const handleNotificationRead = (data: unknown) => {\n      const { id } = data as { id: string | number };\n      markNotificationAsRead(id);\n    };\n\n    const unsubscribe = subscribe('notification:read', handleNotificationRead);\n    return unsubscribe;\n  }, [subscribe]);\n\n  // Subscribe to mark all as read events\n  useEffect(() => {\n    const markAllNotificationsAsRead = () => {\n      setNotifications((prev) => prev.map((notif) => ({ ...notif, isRead: true })));\n    };\n\n    const unsubscribe = subscribe('notifications:all-read', markAllNotificationsAsRead);\n    return unsubscribe;\n  }, [subscribe]);\n\n  // Refresh notifications\n  const refresh = useCallback(async () => {\n    await load();\n  }, [load]);\n\n  // Mark a notification as read with optimistic update\n  const markAsRead = useCallback(async (id: string | number) => {\n    // Optimistic update\n    setNotifications((prev) =>\n      prev.map((notif) => (notif.id === id ? { ...notif, isRead: true } : notif))\n    );\n\n    try {\n      await notificationsService.markAsRead(id);\n    } catch (err) {\n      console.error('[useNotifications] Failed to mark notification as read:', err);\n      // Revert optimistic update on error\n      await load();\n      throw err;\n    }\n  }, [load]);\n\n  // Mark a notification as unread with optimistic update\n  const markAsUnread = useCallback(async (id: string | number) => {\n    // Optimistic update\n    setNotifications((prev) =>\n      prev.map((notif) => (notif.id === id ? { ...notif, isRead: false } : notif))\n    );\n\n    try {\n      // Note: Backend endpoint doesn't exist yet, but structure is ready\n      // await notificationsService.markAsUnread(id);\n      console.log('[useNotifications] Mark as unread not yet implemented on backend for id:', id);\n    } catch (err) {\n      console.error('[useNotifications] Failed to mark notification as unread:', err);\n      // Revert optimistic update on error\n      await load();\n      throw err;\n    }\n  }, [load]);\n\n  // Mark all notifications as read with optimistic update\n  const markAllAsRead = useCallback(async () => {\n    // Optimistic update\n    const previousNotifications = notifications;\n    setNotifications((prev) => prev.map((notif) => ({ ...notif, isRead: true })));\n\n    try {\n      await notificationsService.markAllAsRead();\n    } catch (err) {\n      console.error('[useNotifications] Failed to mark all notifications as read:', err);\n      // Revert optimistic update on error\n      setNotifications(previousNotifications);\n      throw err;\n    }\n  }, [notifications, load]);\n\n  // Handle page change - reset to page 1 if current page is out of bounds\n  useEffect(() => {\n    if (page > totalPages && totalPages > 0) {\n      setPage(1);\n    }\n  }, [page, totalPages]);\n\n  // Reset to page 1 when filter changes\n  useEffect(() => {\n    setPage(1);\n  }, [filter]);\n\n  return {\n    notifications,\n    filteredNotifications,\n    paginatedNotifications,\n    unreadCount,\n    loading,\n    error,\n    page,\n    pageSize,\n    totalPages,\n    filter,\n    refresh,\n    markAsRead,\n    markAsUnread,\n    markAllAsRead,\n    setPage,\n    setPageSize,\n    setFilter\n  };\n}\n\nexport default useNotifications;\n\n","import { useCallback, useEffect, useState } from 'react';\n\nconst STORAGE_KEY = 'notifications:preferences';\n\nexport type NotificationType = 'comment' | 'attachment' | 'notification' | 'email' | 'mention';\n\ninterface Preferences {\n  mutedTypes: NotificationType[];\n}\n\nconst defaultPreferences: Preferences = {\n  mutedTypes: []\n};\n\n/**\n * Load preferences from localStorage\n */\nfunction loadPreferences(): Preferences {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return defaultPreferences;\n    }\n    const parsed = JSON.parse(stored);\n    return {\n      mutedTypes: Array.isArray(parsed.mutedTypes) ? parsed.mutedTypes : []\n    };\n  } catch (error) {\n    console.error('[Preferences] Failed to load from localStorage:', error);\n    return defaultPreferences;\n  }\n}\n\n/**\n * Save preferences to localStorage\n */\nfunction savePreferences(preferences: Preferences): void {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(preferences));\n  } catch (error) {\n    console.error('[Preferences] Failed to save to localStorage:', error);\n  }\n}\n\n/**\n * Hook to manage notification preferences\n *\n * Features:\n * - Mute/unmute specific notification types\n * - Persist preferences to localStorage\n * - Check if a type is muted\n * - Mute/unmute all types\n *\n * @example\n * ```tsx\n * const { mutedTypes, isMuted, toggleMute, muteAll, unmuteAll } = useNotificationPreferences();\n *\n * if (isMuted('comment')) {\n *   console.log('Comment notifications are muted');\n * }\n *\n * toggleMute('email'); // Mute or unmute email notifications\n * ```\n */\nexport function useNotificationPreferences() {\n  const [preferences, setPreferences] = useState<Preferences>(loadPreferences);\n\n  // Save to localStorage whenever preferences change\n  useEffect(() => {\n    savePreferences(preferences);\n  }, [preferences]);\n\n  /**\n   * Check if a notification type is muted\n   */\n  const isMuted = useCallback(\n    (type: NotificationType): boolean => {\n      return preferences.mutedTypes.includes(type);\n    },\n    [preferences.mutedTypes]\n  );\n\n  /**\n   * Toggle mute status for a notification type\n   */\n  const toggleMute = useCallback((type: NotificationType) => {\n    setPreferences((prev) => {\n      const mutedTypes = prev.mutedTypes.includes(type)\n        ? prev.mutedTypes.filter((t) => t !== type)\n        : [...prev.mutedTypes, type];\n      return { mutedTypes };\n    });\n  }, []);\n\n  /**\n   * Mute all notification types\n   */\n  const muteAll = useCallback(() => {\n    const allTypes: NotificationType[] = ['comment', 'attachment', 'notification', 'email', 'mention'];\n    setPreferences({ mutedTypes: allTypes });\n  }, []);\n\n  /**\n   * Unmute all notification types\n   */\n  const unmuteAll = useCallback(() => {\n    setPreferences({ mutedTypes: [] });\n  }, []);\n\n  return {\n    mutedTypes: preferences.mutedTypes,\n    isMuted,\n    toggleMute,\n    muteAll,\n    unmuteAll\n  };\n}\n\nexport default useNotificationPreferences;\n\n"],"names":["__iconNode","IconBell","createReactComponent","IconSettings","mapNotificationFromDto","dto","mapNotificationToDto","notification","listNotifications","response","apiGet","createNotification","payload","apiPost","markAsRead","id","apiPatch","markAllAsRead","notificationsService","isNewNotification","iso","windowMs","created","useCallback","useEffect","useMemo","useState","importShared","useNotifications","notifications","setNotifications","loading","setLoading","error","setError","page","setPage","pageSize","setPageSize","filter","setFilter","subscribe","useWebSocketEvents","unreadCount","n","filteredNotifications","totalPages","paginatedNotifications","startIndex","endIndex","load","err","data","newNotification","prev","markNotificationAsRead","notif","refresh","markAsUnread","previousNotifications","STORAGE_KEY","defaultPreferences","loadPreferences","stored","parsed","savePreferences","preferences","useNotificationPreferences","setPreferences","isMuted","type","toggleMute","t","muteAll","unmuteAll"],"mappings":"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","x_google_ignoreList":[0,1]}