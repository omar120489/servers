{"version":3,"file":"leads-BgdtH0Oz.js","sources":["../../src/services/leads.ts"],"sourcesContent":["import { apiDelete, apiGet, apiPatch, apiPost } from 'utils/axios';\nimport { getAttributionPayload, markAttributionSent } from 'utils/attribution';\nimport type {\n  ApiResponse,\n  Lead,\n  LeadCreateDto,\n  LeadQuery,\n  LeadUpdateDto,\n  PaginatedResponse,\n  UUID\n} from 'types/api';\n\nconst BASE_PATH = '/api/leads';\n\nexport async function listLeads(query?: LeadQuery): Promise<PaginatedResponse<Lead>> {\n  return apiGet<PaginatedResponse<Lead>>(BASE_PATH, { params: query });\n}\n\nexport async function getLead(id: UUID): Promise<Lead> {\n  return apiGet<Lead>(`${BASE_PATH}/${id}`);\n}\n\nexport async function createLead(payload: LeadCreateDto): Promise<Lead> {\n  // Attempt to get attribution data (will be null if already sent this session)\n  const attribution = getAttributionPayload();\n  \n  // Merge attribution into payload if available\n  const finalPayload = attribution \n    ? { ...payload, attribution }\n    : payload;\n  \n  // Create lead with attribution\n  const response = await apiPost<LeadCreateDto, Lead>(BASE_PATH, finalPayload);\n  \n  // Mark attribution as sent after successful creation\n  if (attribution) {\n    markAttributionSent();\n    if (import.meta.env.DEV) {\n      console.log('[Attribution] Sent with lead:', {\n        leadId: response.id,\n        uti: attribution.uti,\n        utm_source: attribution.utm?.source,\n        ad_id: attribution.platform?.ad_id\n      });\n    }\n  }\n  \n  return response;\n}\n\nexport async function updateLead(id: UUID, payload: LeadUpdateDto): Promise<Lead> {\n  return apiPatch<LeadUpdateDto, Lead>(`${BASE_PATH}/${id}`, payload);\n}\n\nexport async function deleteLead(id: UUID): Promise<ApiResponse<void>> {\n  return apiDelete<ApiResponse<void>>(`${BASE_PATH}/${id}`);\n}\n\nexport const leadsApi = {\n  listLeads,\n  getLead,\n  createLead,\n  updateLead,\n  deleteLead\n};\n"],"names":["BASE_PATH","listLeads","query","apiGet","getLead","id","createLead","payload","attribution","getAttributionPayload","finalPayload","response","apiPost","markAttributionSent","updateLead","apiPatch","deleteLead","apiDelete","leadsApi"],"mappings":"kHAYA,MAAMA,EAAY,aAElB,eAAsBC,EAAUC,EAAqD,CACnF,OAAOC,EAAgCH,EAAW,CAAE,OAAQE,EAAO,CACrE,CAEA,eAAsBE,EAAQC,EAAyB,CACrD,OAAOF,EAAa,GAAGH,CAAS,IAAIK,CAAE,EAAE,CAC1C,CAEA,eAAsBC,EAAWC,EAAuC,CAEtE,MAAMC,EAAcC,EAAA,EAGdC,EAAeF,EACjB,CAAE,GAAGD,EAAS,YAAAC,GACdD,EAGEI,EAAW,MAAMC,EAA6BZ,EAAWU,CAAY,EAG3E,OAAIF,GACFK,EAAA,EAWKF,CACT,CAEA,eAAsBG,EAAWT,EAAUE,EAAuC,CAChF,OAAOQ,EAA8B,GAAGf,CAAS,IAAIK,CAAE,GAAIE,CAAO,CACpE,CAEA,eAAsBS,EAAWX,EAAsC,CACrE,OAAOY,EAA6B,GAAGjB,CAAS,IAAIK,CAAE,EAAE,CAC1D,CAEO,MAAMa,EAAW,CACtB,UAAAjB,EACA,QAAAG,EACA,WAAAE,EACA,WAAAQ,EACA,WAAAE,CACF"}