{"version":3,"file":"DealsListPage-DJBSCwdW.js","sources":["../../src/hooks/useDeals.ts","../../src/views/pages/deals/DealsListPage.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { dealsApi } from 'services/deals';\nimport type { Deal, DealQuery, PaginatedResponse } from 'types/api';\n\nconst DEFAULT_QUERY: DealQuery = {\n  page: 1,\n  size: 10,\n  search: ''\n};\n\ninterface UseDealsOptions {\n  initialQuery?: DealQuery;\n}\n\ninterface UseDealsResult {\n  deals: Deal[];\n  data: PaginatedResponse<Deal> | null;\n  loading: boolean;\n  error: unknown;\n  query: DealQuery;\n  updateQuery: (patch: Partial<DealQuery>) => void;\n  setQuery: (updater: (prev: DealQuery) => DealQuery) => void;\n  refetch: () => Promise<void>;\n}\n\nexport function useDeals(options?: UseDealsOptions): UseDealsResult {\n  const [query, setQueryState] = useState<DealQuery>(() => ({\n    ...DEFAULT_QUERY,\n    ...(options?.initialQuery ?? {})\n  }));\n  const [data, setData] = useState<PaginatedResponse<Deal> | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<unknown>(null);\n\n  const effectiveQuery = useMemo(\n    () => ({\n      ...DEFAULT_QUERY,\n      ...query\n    }),\n    [query]\n  );\n\n  const execute = useCallback(async (params: DealQuery) => {\n    const result = await dealsApi.listDeals(params);\n    setData(result);\n    setError(null);\n  }, []);\n\n  const loadDeals = useCallback(\n    async (params: DealQuery) => {\n      setLoading(true);\n      try {\n        await execute(params);\n      } catch (err) {\n        setError(err);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [execute]\n  );\n\n  useEffect(() => {\n    let active = true;\n    setLoading(true);\n    dealsApi\n      .listDeals(effectiveQuery)\n      .then((result) => {\n        if (!active) return;\n        setData(result);\n        setError(null);\n      })\n      .catch((err) => {\n        if (!active) return;\n        setError(err);\n      })\n      .finally(() => {\n        if (!active) return;\n        setLoading(false);\n      });\n\n    return () => {\n      active = false;\n    };\n  }, [effectiveQuery]);\n\n  const updateQuery = useCallback((patch: Partial<DealQuery>) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...patch\n    }));\n  }, []);\n\n  const setQuery = useCallback((updater: (prev: DealQuery) => DealQuery) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...updater(prev)\n    }));\n  }, []);\n\n  const refetch = useCallback(async () => {\n    await loadDeals(effectiveQuery);\n  }, [loadDeals, effectiveQuery]);\n\n  return {\n    deals: data?.items ?? [],\n    data,\n    loading,\n    error,\n    query: effectiveQuery,\n    updateQuery,\n    setQuery,\n    refetch\n  };\n}\n\nexport default useDeals;\n","import { useCallback, useMemo, type ReactNode } from 'react';\nimport { Link as RouterLink, useSearchParams } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport Chip from '@mui/material/Chip';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Alert from '@mui/material/Alert';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SearchIcon from '@mui/icons-material/Search';\nimport {\n  DataGrid,\n  type GridColDef,\n  type GridPaginationModel,\n  type GridRenderCellParams\n} from '@mui/x-data-grid';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport { useDeals } from 'hooks/useDeals';\nimport type { Deal, DealQuery } from 'types/api';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nfunction formatCurrency(value?: number | null) {\n  if (value === null || value === undefined || Number.isNaN(value)) {\n    return '—';\n  }\n\n  return new Intl.NumberFormat(undefined, {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 0\n  }).format(value);\n}\n\nfunction formatProbability(value?: number | null) {\n  if (value === null || value === undefined) {\n    return '—';\n  }\n\n  const display = value > 1 ? value : value * 100;\n  return `${Math.round(display)}%`;\n}\n\nfunction formatDate(value?: string | null) {\n  if (!value) {\n    return '—';\n  }\n\n  return new Intl.DateTimeFormat(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(new Date(value));\n}\n\nfunction getStatusColor(\n  status?: string | null\n): 'default' | 'success' | 'warning' | 'error' | 'info' {\n  if (!status) {\n    return 'default';\n  }\n\n  const normalized = status.toLowerCase();\n  if (normalized.includes('won')) return 'success';\n  if (normalized.includes('lost')) return 'error';\n  if (normalized.includes('hold') || normalized.includes('pending')) return 'warning';\n  if (normalized.includes('negotiation') || normalized.includes('proposal')) return 'info';\n  return 'default';\n}\n\nexport default function DealsListPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const initialQuery = useMemo<DealQuery>(() => {\n    const getNumber = (key: string, fallback: number) => {\n      const value = Number(searchParams.get(key));\n      return Number.isFinite(value) && value > 0 ? value : fallback;\n    };\n\n    const getString = (key: string) => {\n      const value = searchParams.get(key);\n      return value && value.trim().length > 0 ? value : undefined;\n    };\n\n    return {\n      page: getNumber('page', 1),\n      size: getNumber('size', DEFAULT_PAGE_SIZE),\n      search: searchParams.get('search') ?? '',\n      dateFrom: getString('dateFrom'),\n      dateTo: getString('dateTo'),\n      stage: getString('stage') as DealQuery['stage'],\n      ownerId: getString('ownerId')\n    };\n  }, [searchParams]);\n\n  const { deals, data, loading, error, query, updateQuery, refetch } = useDeals({\n    initialQuery\n  });\n\n  const syncSearchParams = useCallback(\n    (patch: Record<string, string | undefined>) => {\n      const next = new URLSearchParams(searchParams);\n      Object.entries(patch).forEach(([key, value]) => {\n        if (value === undefined || value === '') {\n          next.delete(key);\n        } else {\n          next.set(key, value);\n        }\n      });\n      setSearchParams(next);\n    },\n    [searchParams, setSearchParams]\n  );\n\n  const newDealLink: ReactNode = (\n    <Button component={RouterLink} to=\"/deals/new\" variant=\"contained\">\n      New Deal\n    </Button>\n  );\n\n  const viewReportsLink: ReactNode = (\n    <Button component={RouterLink} to=\"/reports\" size=\"small\" variant=\"text\">\n      View reports\n    </Button>\n  );\n\n  const paginationModel = useMemo(\n    () => ({\n      page: Math.max(0, (query.page ?? 1) - 1),\n      pageSize: query.size ?? DEFAULT_PAGE_SIZE\n    }),\n    [query.page, query.size]\n  );\n\n  const handlePaginationChange = useCallback(\n    (model: GridPaginationModel) => {\n      const nextPage = model.page + 1;\n      const nextSize = model.pageSize;\n      updateQuery({ page: nextPage, size: nextSize });\n      syncSearchParams({\n        page: String(nextPage),\n        size: String(nextSize)\n      });\n    },\n    [syncSearchParams, updateQuery]\n  );\n\n  const handleSearchChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      updateQuery({ search: value, page: 1 });\n      const trimmed = value.trim();\n      syncSearchParams({\n        search: trimmed.length > 0 ? value : undefined,\n        page: '1',\n        size: String(query.size ?? DEFAULT_PAGE_SIZE)\n      });\n    },\n    [query.size, syncSearchParams, updateQuery]\n  );\n\n  const handleRefresh = useCallback(() => {\n    void refetch();\n  }, [refetch]);\n\n  const hasFilters = useMemo(() => {\n    const searchValue = (query.search ?? '').trim();\n    return Boolean(searchValue || query.dateFrom || query.dateTo || query.stage || query.ownerId);\n  }, [query.dateFrom, query.dateTo, query.ownerId, query.search, query.stage]);\n\n  const handleClearFilters = useCallback(() => {\n    const nextSize = query.size ?? DEFAULT_PAGE_SIZE;\n    updateQuery({\n      page: 1,\n      size: nextSize,\n      search: '',\n      dateFrom: undefined,\n      dateTo: undefined,\n      stage: undefined,\n      ownerId: undefined\n    });\n    syncSearchParams({\n      page: '1',\n      size: String(nextSize),\n      search: undefined,\n      dateFrom: undefined,\n      dateTo: undefined,\n      stage: undefined,\n      ownerId: undefined\n    });\n  }, [query.size, syncSearchParams, updateQuery]);\n\n  const columns = useMemo<GridColDef<Deal>[]>(\n    () => [\n      {\n        field: 'name',\n        headerName: 'Deal',\n        flex: 1.2,\n        minWidth: 200,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n            <Typography variant=\"subtitle1\" fontWeight={600} noWrap>\n              {params.row.name}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n              Owner: {params.row.ownerId ?? '—'}\n            </Typography>\n          </Box>\n        )\n      },\n      {\n        field: 'amount',\n        headerName: 'Amount',\n        flex: 0.6,\n        minWidth: 140,\n        type: 'number',\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatCurrency(params.row.amount)}\n          </Typography>\n        )\n      },\n      {\n        field: 'stage',\n        headerName: 'Stage',\n        flex: 0.5,\n        minWidth: 140,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Chip label={params.row.stage || '—'} size=\"small\" variant=\"outlined\" />\n        )\n      },\n      {\n        field: 'status',\n        headerName: 'Status',\n        flex: 0.5,\n        minWidth: 140,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Chip\n            label={params.row.status || '—'}\n            size=\"small\"\n            color={getStatusColor(params.row.status)}\n          />\n        )\n      },\n      {\n        field: 'probability',\n        headerName: 'Probability',\n        flex: 0.4,\n        minWidth: 120,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatProbability(params.row.probability)}\n          </Typography>\n        )\n      },\n      {\n        field: 'closeDate',\n        headerName: 'Close Date',\n        flex: 0.6,\n        minWidth: 150,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatDate(params.row.closeDate)}\n          </Typography>\n        )\n      },\n      {\n        field: 'updatedAt',\n        headerName: 'Updated',\n        flex: 0.6,\n        minWidth: 150,\n        renderCell: (params: GridRenderCellParams<Deal>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatDate(params.row.updatedAt)}\n          </Typography>\n        )\n      },\n      {\n        field: 'actions',\n        headerName: 'Actions',\n        sortable: false,\n        filterable: false,\n        minWidth: 160,\n        align: 'right',\n        disableColumnMenu: true,\n        renderCell: (params: GridRenderCellParams<Deal>) => {\n          const viewLink: ReactNode = (\n            <Button component={RouterLink} to={`/deals/${params.row.id}`} size=\"small\">\n              View\n            </Button>\n          );\n\n          const editLink: ReactNode = (\n            <Button\n              component={RouterLink}\n              to={`/deals/${params.row.id}/edit`}\n              size=\"small\"\n              color=\"secondary\"\n            >\n              Edit\n            </Button>\n          );\n\n          return (\n            <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1 }}>\n              {viewLink}\n              {editLink}\n            </Box>\n          );\n        }\n      }\n    ],\n    []\n  );\n\n  return (\n    <MainCard title=\"Deals\" content={false}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', md: 'row' },\n            gap: 2,\n            alignItems: { xs: 'stretch', md: 'center' },\n            justifyContent: 'space-between'\n          }}\n        >\n          <TextField\n            fullWidth\n            placeholder=\"Search deals\"\n            value={query.search ?? ''}\n            onChange={handleSearchChange}\n            slotProps={{\n              input: {\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon fontSize=\"small\" />\n                  </InputAdornment>\n                )\n              }\n            }}\n          />\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: 1.5,\n              justifyContent: { xs: 'flex-start', md: 'flex-end' }\n            }}\n          >\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={handleRefresh}\n              disabled={loading}\n            >\n              Refresh\n            </Button>\n            {newDealLink}\n          </Box>\n        </Box>\n\n        {hasFilters && (\n          <Chip\n            label=\"Active filters\"\n            onDelete={handleClearFilters}\n            color=\"primary\"\n            size=\"small\"\n            sx={{ alignSelf: 'flex-start' }}\n          />\n        )}\n\n        {Boolean(error) && (\n          <Alert severity=\"error\">\n            {error instanceof Error ? error.message : 'Failed to load deals. Please try again.'}\n            {error instanceof Error && error.stack && (\n              <Typography component=\"pre\" variant=\"caption\" sx={{ mt: 1, whiteSpace: 'pre-wrap' }}>\n                {error.stack}\n              </Typography>\n            )}\n          </Alert>\n        )}\n\n        <Box sx={{ width: '100%' }}>\n          <DataGrid\n            disableColumnMenu\n            disableRowSelectionOnClick\n            rows={deals}\n            columns={columns}\n            loading={loading}\n            getRowId={(row) => row.id}\n            paginationMode=\"server\"\n            paginationModel={paginationModel}\n            onPaginationModelChange={handlePaginationChange}\n            rowCount={data?.total ?? deals.length}\n            pageSizeOptions={[5, 10, 25, 50]}\n            sx={{\n              '& .MuiDataGrid-cell': {\n                outline: 'none !important'\n              }\n            }}\n          />\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', sm: 'row' },\n            gap: 1,\n            alignItems: { xs: 'flex-start', sm: 'center' }\n          }}\n        >\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Showing {deals.length} of {data?.total ?? 0} deals\n          </Typography>\n          <Box>{viewReportsLink}</Box>\n        </Box>\n      </Box>\n    </MainCard>\n  );\n}\n"],"names":["useCallback","useEffect","useMemo","useState","importShared","DEFAULT_QUERY","useDeals","options","query","setQueryState","data","setData","loading","setLoading","error","setError","effectiveQuery","execute","params","result","dealsApi","loadDeals","err","active","updateQuery","patch","prev","setQuery","updater","refetch","RouterLink","useSearchParams","DEFAULT_PAGE_SIZE","formatCurrency","value","formatProbability","display","formatDate","getStatusColor","status","normalized","DealsListPage","searchParams","setSearchParams","initialQuery","getNumber","key","fallback","getString","deals","syncSearchParams","next","newDealLink","Button","viewReportsLink","jsx","paginationModel","handlePaginationChange","model","nextPage","nextSize","handleSearchChange","event","trimmed","handleRefresh","hasFilters","handleClearFilters","columns","jsxs","Box","Typography","Chip","viewLink","editLink","MainCard","TextField","InputAdornment","SearchIcon","RefreshIcon","Alert","DataGrid","row"],"mappings":"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"}