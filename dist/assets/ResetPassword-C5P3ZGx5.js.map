{"version":3,"mappings":";wgBAAA,WAAAA,EAAA,gBAAAC,CAAA,QAAAC,EAAA,oBACA,WAAAC,EAAA,SAAAC,CAAA,QAAAF,EAAA,SAoBMG,EAA2B,CAC/B,SAAU,UAAM,OAAO,iCAA8B,0IACrD,IAAK,UAAM,OAAO,iCAAyB,2IAC3C,IAAK,UAAM,OAAO,iCAAyB,0JAC3C,MAAO,UAAM,OAAO,iCAA2B,2IAC/C,SAAU,IAAAC,EAAA,IAAM,OAAO,iCAA8B,0IACvD,EAEA,SAAwBC,GAAgB,CACtC,MAAMC,EAASC,EAAeC,GAAUA,EAAM,YAAY,KAAK,IAAI,CAAC,EAC9D,CAACC,CAAY,EAAIV,EAAA,EACjB,CAAE,WAAAW,CAAA,EAAeC,EAAA,EACjB,CAACC,EAA4BC,CAA6B,EAAIX,EAAS,IAAI,EAE3EY,EAAYL,EAAa,IAAI,MAAM,GAAK,GAE9C,OAAAR,EAAU,IAAM,CACd,MAAMc,EAAeD,GAAaE,EAE5BC,EAAmCd,EAAyBY,CAAY,EAE9EE,IACG,KAAMC,GAAWL,EAA8B,IAAMK,EAAO,OAAO,CAAC,EACpE,MAAOC,GAAU,CAChB,QAAQ,MAAM,iBAAiBJ,CAAY,qBAAsBI,CAAK,CACxE,CAAC,CACL,EAAG,CAACL,CAAS,CAAC,EAGZM,MAACC,EAAA,CACC,SAAAC,OAACC,EAAA,CAAM,GAAI,CAAE,eAAgB,WAAY,UAAW,SAClD,UAAAH,MAACG,EAAA,CACC,GAAI,CAAE,eAAgB,SAAU,WAAY,SAAU,UAAW,sBAEjE,SAAAD,OAACE,EAAA,CAAI,GAAI,CAAE,EAAG,CAAE,GAAI,EAAG,GAAI,GAAK,GAAI,GACjC,WAACd,SAAee,EAAA,EAAc,EAC/BL,MAACM,EAAA,CACC,SAAAJ,OAACC,EAAA,CAAM,GAAI,CAAE,WAAY,SAAU,eAAgB,SAAU,IAAK,GAChE,UAAAH,MAACI,EAAA,CAAI,GAAI,CAAE,GAAI,GACb,SAAAJ,MAACtB,EAAA,CAAK,GAAG,IAAI,aAAW,aACtB,SAAAsB,MAACO,EAAA,EAAK,EACR,EACF,EACAP,MAACG,EAAA,CACC,UAAW,CAAE,GAAI,iBAAkB,GAAI,OACvC,GAAI,CAAE,WAAY,SAAU,eAAgB,UAE5C,SAAAD,OAACC,EAAA,CAAM,GAAI,CAAE,WAAY,SAAU,eAAgB,SAAU,IAAK,GAChE,UAAAH,MAACQ,EAAA,CACC,aAAY,GACZ,QAAStB,EAAS,KAAO,KACzB,GAAI,CAAE,MAAO,kBACd,4BAGDc,MAACQ,EAAA,CACC,QAAQ,UACR,GAAI,CAAE,SAAU,OAAQ,UAAW,CAAE,GAAI,SAAU,GAAI,UAAU,EAClE,4CAED,EACF,IAEDhB,SAA+BA,EAAA,EAA2B,GAC7D,EACF,EACC,CAACF,GACAU,MAACI,EAAA,CACC,GAAI,CACF,SAAU,CAAE,GAAI,IAAK,GAAI,KACzB,OAAQ,CAAE,GAAI,IAAK,GAAI,GACvB,QAAS,CACP,SAAU,EACV,UAAW,MACb,EAGF,SAAAJ,MAACS,EAAA,CAAc,iBAAkBb,CAAA,CAAU,GAC7C,EAEJ,IAEFI,MAACI,EAAA,CAAI,GAAI,CAAE,GAAI,EAAG,GAAI,GACpB,SAAAJ,MAACU,EAAA,EAAW,EACd,GACF,EACF,CAEJ","names":["Link","useSearchParams","importShared","useEffect","useState","authResetPasswordImports","__vitePreload","ResetPassword","downMD","useMediaQuery","theme","searchParams","isLoggedIn","useAuth","AuthResetPasswordComponent","setAuthResetPasswordComponent","authParam","selectedAuth","APP_AUTH","importAuthResetPasswordComponent","module","error","jsx","AuthWrapper1","jsxs","Stack","Box","ViewOnlyAlert","AuthCardWrapper","Logo","Typography","LoginProvider","AuthFooter"],"ignoreList":[],"sources":["../../src/views/pages/authentication/ResetPassword.jsx"],"sourcesContent":["import { Link, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport Stack from '@mui/material/Stack';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\n// project imports\nimport AuthWrapper1 from './AuthWrapper1';\nimport AuthCardWrapper from './AuthCardWrapper';\nimport ViewOnlyAlert from './ViewOnlyAlert';\nimport LoginProvider from './LoginProvider';\n\nimport Logo from 'ui-component/Logo';\nimport AuthFooter from 'ui-component/cards/AuthFooter';\n\nimport { APP_AUTH } from 'config';\nimport useAuth from 'hooks/useAuth';\n\n// A mapping of auth types to dynamic imports for reset password\nconst authResetPasswordImports = {\n  firebase: () => import('./firebase/AuthResetPassword'),\n  jwt: () => import('./jwt/AuthResetPassword'),\n  aws: () => import('./aws/AuthResetPassword'),\n  auth0: () => import('./auth0/AuthResetPassword'),\n  supabase: () => import('./supabase/AuthResetPassword')\n};\n\nexport default function ResetPassword() {\n  const downMD = useMediaQuery((theme) => theme.breakpoints.down('md'));\n  const [searchParams] = useSearchParams();\n  const { isLoggedIn } = useAuth();\n  const [AuthResetPasswordComponent, setAuthResetPasswordComponent] = useState(null);\n\n  const authParam = searchParams.get('auth') || '';\n\n  useEffect(() => {\n    const selectedAuth = authParam || APP_AUTH;\n\n    const importAuthResetPasswordComponent = authResetPasswordImports[selectedAuth];\n\n    importAuthResetPasswordComponent()\n      .then((module) => setAuthResetPasswordComponent(() => module.default))\n      .catch((error) => {\n        console.error(`Error loading ${selectedAuth} AuthResetPassword`, error);\n      });\n  }, [authParam]);\n\n  return (\n    <AuthWrapper1>\n      <Stack sx={{ justifyContent: 'flex-end', minHeight: '100vh' }}>\n        <Stack\n          sx={{ justifyContent: 'center', alignItems: 'center', minHeight: 'calc(100vh - 68px)' }}\n        >\n          <Box sx={{ m: { xs: 1, sm: 3 }, mb: 0 }}>\n            {!isLoggedIn && <ViewOnlyAlert />}\n            <AuthCardWrapper>\n              <Stack sx={{ alignItems: 'center', justifyContent: 'center', gap: 2 }}>\n                <Box sx={{ mb: 3 }}>\n                  <Link to=\"#\" aria-label=\"theme logo\">\n                    <Logo />\n                  </Link>\n                </Box>\n                <Stack\n                  direction={{ xs: 'column-reverse', md: 'row' }}\n                  sx={{ alignItems: 'center', justifyContent: 'center' }}\n                >\n                  <Stack sx={{ alignItems: 'center', justifyContent: 'center', gap: 1 }}>\n                    <Typography\n                      gutterBottom\n                      variant={downMD ? 'h3' : 'h2'}\n                      sx={{ color: 'secondary.main' }}\n                    >\n                      Reset Password\n                    </Typography>\n                    <Typography\n                      variant=\"caption\"\n                      sx={{ fontSize: '16px', textAlign: { xs: 'center', md: 'inherit' } }}\n                    >\n                      Please choose your new password\n                    </Typography>\n                  </Stack>\n                </Stack>\n                {AuthResetPasswordComponent && <AuthResetPasswordComponent />}\n              </Stack>\n            </AuthCardWrapper>\n            {!isLoggedIn && (\n              <Box\n                sx={{\n                  maxWidth: { xs: 400, lg: 475 },\n                  margin: { xs: 2.5, md: 3 },\n                  '& > *': {\n                    flexGrow: 1,\n                    flexBasis: '50%'\n                  }\n                }}\n              >\n                <LoginProvider currentLoginWith={APP_AUTH} />\n              </Box>\n            )}\n          </Box>\n        </Stack>\n        <Box sx={{ px: 3, my: 3 }}>\n          <AuthFooter />\n        </Box>\n      </Stack>\n    </AuthWrapper1>\n  );\n}\n"],"file":"ResetPassword-C5P3ZGx5.js"}