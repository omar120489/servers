{"version":3,"file":"CompaniesListPage-fssWAgTC.js","sources":["../../node_modules/@mui/icons-material/esm/BusinessCenter.js","../../src/services/companies.ts","../../src/hooks/useCompanies.ts","../../src/views/pages/companies/CompaniesListPage.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2m-6 0h-4V5h4z\"\n}), 'BusinessCenter');","import { apiDelete, apiGet, apiPatch, apiPost } from 'utils/axios';\nimport type {\n  ApiResponse,\n  Company,\n  CompanyCreateDto,\n  CompanyQuery,\n  CompanyUpdateDto,\n  PaginatedResponse,\n  UUID\n} from 'types/api';\n\nconst BASE_PATH = '/api/companies';\n\nexport async function listCompanies(query?: CompanyQuery): Promise<PaginatedResponse<Company>> {\n  return apiGet<PaginatedResponse<Company>>(BASE_PATH, { params: query });\n}\n\nexport async function getCompany(id: UUID): Promise<Company> {\n  return apiGet<Company>(`${BASE_PATH}/${id}`);\n}\n\nexport async function createCompany(payload: CompanyCreateDto): Promise<Company> {\n  return apiPost<CompanyCreateDto, Company>(BASE_PATH, payload);\n}\n\nexport async function updateCompany(id: UUID, payload: CompanyUpdateDto): Promise<Company> {\n  return apiPatch<CompanyUpdateDto, Company>(`${BASE_PATH}/${id}`, payload);\n}\n\nexport async function deleteCompany(id: UUID): Promise<ApiResponse<void>> {\n  return apiDelete<ApiResponse<void>>(`${BASE_PATH}/${id}`);\n}\n\nexport const companiesApi = {\n  listCompanies,\n  getCompany,\n  createCompany,\n  updateCompany,\n  deleteCompany\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { companiesApi } from 'services/companies';\nimport type { Company, CompanyQuery, PaginatedResponse } from 'types/api';\n\nconst DEFAULT_QUERY: CompanyQuery = {\n  page: 1,\n  size: 10,\n  search: '',\n  companySize: null\n};\n\ninterface UseCompaniesOptions {\n  initialQuery?: CompanyQuery;\n}\n\ninterface UseCompaniesResult {\n  companies: Company[];\n  data: PaginatedResponse<Company> | null;\n  loading: boolean;\n  error: unknown;\n  query: CompanyQuery;\n  updateQuery: (patch: Partial<CompanyQuery>) => void;\n  setQuery: (updater: (prev: CompanyQuery) => CompanyQuery) => void;\n  refetch: () => Promise<void>;\n}\n\nexport function useCompanies(options?: UseCompaniesOptions): UseCompaniesResult {\n  const [query, setQueryState] = useState<CompanyQuery>(() => ({\n    ...DEFAULT_QUERY,\n    ...(options?.initialQuery ?? {})\n  }));\n  const [data, setData] = useState<PaginatedResponse<Company> | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<unknown>(null);\n\n  const effectiveQuery = useMemo(\n    () => ({\n      ...DEFAULT_QUERY,\n      ...query\n    }),\n    [query]\n  );\n\n  const execute = useCallback(async (params: CompanyQuery) => {\n    const result = await companiesApi.listCompanies(params);\n    setData(result);\n    setError(null);\n  }, []);\n\n  const loadCompanies = useCallback(\n    async (params: CompanyQuery) => {\n      setLoading(true);\n      try {\n        await execute(params);\n      } catch (err) {\n        setError(err);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [execute]\n  );\n\n  useEffect(() => {\n    let active = true;\n    setLoading(true);\n\n    companiesApi\n      .listCompanies(effectiveQuery)\n      .then((result) => {\n        if (!active) return;\n        setData(result);\n        setError(null);\n      })\n      .catch((err) => {\n        if (!active) return;\n        setError(err);\n      })\n      .finally(() => {\n        if (!active) return;\n        setLoading(false);\n      });\n\n    return () => {\n      active = false;\n    };\n  }, [effectiveQuery]);\n\n  const updateQuery = useCallback((patch: Partial<CompanyQuery>) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...patch\n    }));\n  }, []);\n\n  const setQuery = useCallback((updater: (prev: CompanyQuery) => CompanyQuery) => {\n    setQueryState((prev) => ({\n      ...prev,\n      ...updater(prev)\n    }));\n  }, []);\n\n  const refetch = useCallback(async () => {\n    await loadCompanies(effectiveQuery);\n  }, [loadCompanies, effectiveQuery]);\n\n  return {\n    companies: data?.items ?? [],\n    data,\n    loading,\n    error,\n    query: effectiveQuery,\n    updateQuery,\n    setQuery,\n    refetch\n  };\n}\n\nexport default useCompanies;\n","import { useCallback, useMemo, type ReactNode } from 'react';\nimport { Link as RouterLink, useSearchParams } from 'react-router-dom';\n\nimport Alert from '@mui/material/Alert';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\nimport Chip from '@mui/material/Chip';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport SearchIcon from '@mui/icons-material/Search';\nimport BusinessCenterIcon from '@mui/icons-material/BusinessCenter';\nimport {\n  DataGrid,\n  type GridColDef,\n  type GridPaginationModel,\n  type GridRenderCellParams\n} from '@mui/x-data-grid';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport { useCompanies } from 'hooks/useCompanies';\nimport type { Company, CompanyQuery } from 'types/api';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nfunction formatDate(value?: string | null) {\n  if (!value) {\n    return 'â€”';\n  }\n\n  return new Intl.DateTimeFormat(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(new Date(value));\n}\n\nexport default function CompaniesListPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const initialQuery = useMemo<CompanyQuery>(() => {\n    const getNumber = (key: string, fallback: number) => {\n      const value = Number(searchParams.get(key));\n      return Number.isFinite(value) && value > 0 ? value : fallback;\n    };\n\n    const getString = (key: string) => {\n      const value = searchParams.get(key);\n      return value && value.trim().length > 0 ? value : undefined;\n    };\n\n    return {\n      page: getNumber('page', 1),\n      size: getNumber('size', DEFAULT_PAGE_SIZE),\n      search: searchParams.get('search') ?? '',\n      dateFrom: getString('dateFrom'),\n      dateTo: getString('dateTo'),\n      ownerId: getString('ownerId')\n    };\n  }, [searchParams]);\n\n  const { companies, data, loading, error, query, updateQuery, refetch } = useCompanies({\n    initialQuery\n  });\n\n  const syncSearchParams = useCallback(\n    (patch: Record<string, string | undefined>) => {\n      const next = new URLSearchParams(searchParams);\n      Object.entries(patch).forEach(([key, value]) => {\n        if (value === undefined || value === '') {\n          next.delete(key);\n        } else {\n          next.set(key, value);\n        }\n      });\n      setSearchParams(next);\n    },\n    [searchParams, setSearchParams]\n  );\n\n  const stageFilter = useMemo(() => {\n    const value = searchParams.get('stage');\n    return value && value.trim().length > 0 ? value : undefined;\n  }, [searchParams]);\n\n  const paginationModel: GridPaginationModel = useMemo(\n    () => ({\n      page: Math.max(0, (query.page ?? 1) - 1),\n      pageSize: Number(query.size ?? DEFAULT_PAGE_SIZE)\n    }),\n    [query.page, query.size]\n  );\n\n  const handlePaginationChange = useCallback(\n    (model: GridPaginationModel) => {\n      const nextPage = model.page + 1;\n      const nextSize = model.pageSize;\n      updateQuery({ page: nextPage, size: nextSize });\n      syncSearchParams({\n        page: String(nextPage),\n        size: String(nextSize)\n      });\n    },\n    [syncSearchParams, updateQuery]\n  );\n\n  const handleSearchChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.target.value;\n      updateQuery({ search: value, page: 1 });\n      const trimmed = value.trim();\n      syncSearchParams({\n        search: trimmed.length > 0 ? value : undefined,\n        page: '1',\n        size: String(query.size ?? DEFAULT_PAGE_SIZE)\n      });\n    },\n    [query.size, syncSearchParams, updateQuery]\n  );\n\n  const handleRefresh = useCallback(() => {\n    void refetch();\n  }, [refetch]);\n\n  const hasFilters = useMemo(() => {\n    const searchFilter = (query.search ?? '').trim();\n    return Boolean(searchFilter || query.dateFrom || query.dateTo || query.ownerId || stageFilter);\n  }, [query.dateFrom, query.dateTo, query.ownerId, query.search, stageFilter]);\n\n  const handleClearFilters = useCallback(() => {\n    const nextSize = query.size ?? DEFAULT_PAGE_SIZE;\n    updateQuery({\n      page: 1,\n      size: nextSize,\n      search: '',\n      dateFrom: undefined,\n      dateTo: undefined,\n      ownerId: undefined\n    });\n    syncSearchParams({\n      page: '1',\n      size: String(nextSize),\n      search: undefined,\n      dateFrom: undefined,\n      dateTo: undefined,\n      ownerId: undefined,\n      stage: undefined\n    });\n  }, [query.size, syncSearchParams, updateQuery]);\n\n  const columns = useMemo<GridColDef<Company>[]>(\n    () => [\n      {\n        field: 'name',\n        headerName: 'Company',\n        flex: 1,\n        minWidth: 220,\n        renderCell: (params: GridRenderCellParams<Company>) => (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.25 }}>\n            <Typography variant=\"subtitle1\" fontWeight={600} noWrap>\n              {params.row.name}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n              Owner: {params.row.ownerId ?? 'â€”'}\n            </Typography>\n          </Box>\n        )\n      },\n      {\n        field: 'domain',\n        headerName: 'Domain',\n        flex: 0.8,\n        minWidth: 160,\n        renderCell: (params: GridRenderCellParams<Company>) => (\n          <Typography variant=\"body2\" noWrap>\n            {params.row.domain ?? 'â€”'}\n          </Typography>\n        )\n      },\n      {\n        field: 'industry',\n        headerName: 'Industry',\n        flex: 0.8,\n        minWidth: 160,\n        renderCell: (params: GridRenderCellParams<Company>) => (\n          <Typography variant=\"body2\" noWrap>\n            {params.row.industry ?? 'â€”'}\n          </Typography>\n        )\n      },\n      {\n        field: 'size',\n        headerName: 'Size',\n        flex: 0.6,\n        minWidth: 140,\n        renderCell: (params: GridRenderCellParams<Company>) =>\n          params.row.size ? (\n            <Chip label={params.row.size} size=\"small\" variant=\"outlined\" />\n          ) : (\n            <Chip label=\"â€”\" size=\"small\" variant=\"outlined\" />\n          )\n      },\n      {\n        field: 'updatedAt',\n        headerName: 'Updated',\n        flex: 0.7,\n        minWidth: 150,\n        renderCell: (params: GridRenderCellParams<Company>) => (\n          <Typography variant=\"body2\" noWrap>\n            {formatDate(params.row.updatedAt)}\n          </Typography>\n        )\n      },\n      {\n        field: 'actions',\n        headerName: 'Actions',\n        sortable: false,\n        filterable: false,\n        minWidth: 160,\n        align: 'right',\n        disableColumnMenu: true,\n        renderCell: (params: GridRenderCellParams<Company>) => {\n          const viewLink: ReactNode = (\n            <Button component={RouterLink} to={`/companies/${params.row.id}`} size=\"small\">\n              View\n            </Button>\n          );\n\n          const editLink: ReactNode = (\n            <Button\n              component={RouterLink}\n              to={`/companies/${params.row.id}/edit`}\n              size=\"small\"\n              color=\"secondary\"\n            >\n              Edit\n            </Button>\n          );\n\n          return (\n            <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1 }}>\n              {viewLink}\n              {editLink}\n            </Box>\n          );\n        }\n      }\n    ],\n    []\n  );\n\n  const newCompanyLink: ReactNode = (\n    <Button\n      component={RouterLink}\n      to=\"/companies/new\"\n      variant=\"contained\"\n      startIcon={<BusinessCenterIcon />}\n    >\n      New Company\n    </Button>\n  );\n\n  return (\n    <MainCard title=\"Companies\" content={false}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 3 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', md: 'row' },\n            gap: 2,\n            alignItems: { xs: 'stretch', md: 'center' },\n            justifyContent: 'space-between'\n          }}\n        >\n          <TextField\n            fullWidth\n            placeholder=\"Search companies\"\n            value={query.search ?? ''}\n            onChange={handleSearchChange}\n            slotProps={{\n              input: {\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon fontSize=\"small\" />\n                  </InputAdornment>\n                )\n              }\n            }}\n          />\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: 1.5,\n              justifyContent: { xs: 'flex-start', md: 'flex-end' }\n            }}\n          >\n            <Button\n              variant=\"outlined\"\n              startIcon={<RefreshIcon />}\n              onClick={handleRefresh}\n              disabled={loading}\n            >\n              Refresh\n            </Button>\n            {newCompanyLink}\n          </Box>\n        </Box>\n\n        {hasFilters && (\n          <Chip\n            label=\"Active filters\"\n            onDelete={handleClearFilters}\n            color=\"primary\"\n            size=\"small\"\n            sx={{ alignSelf: 'flex-start' }}\n          />\n        )}\n\n        {Boolean(error) && (\n          <Alert severity=\"error\">\n            {error instanceof Error ? error.message : 'Failed to load companies. Please try again.'}\n          </Alert>\n        )}\n\n        <Box sx={{ width: '100%' }}>\n          <DataGrid\n            disableColumnMenu\n            disableRowSelectionOnClick\n            rows={companies}\n            columns={columns}\n            loading={loading}\n            getRowId={(row) => row.id}\n            paginationMode=\"server\"\n            paginationModel={paginationModel}\n            onPaginationModelChange={handlePaginationChange}\n            rowCount={data?.total ?? companies.length}\n            pageSizeOptions={[5, 10, 25, 50]}\n            sx={{\n              '& .MuiDataGrid-cell': {\n                outline: 'none !important'\n              }\n            }}\n          />\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: { xs: 'column', sm: 'row' },\n            gap: 1,\n            alignItems: { xs: 'flex-start', sm: 'center' }\n          }}\n        >\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            Showing {companies.length} of {data?.total ?? 0} companies\n          </Typography>\n        </Box>\n      </Box>\n    </MainCard>\n  );\n}\n"],"names":["BusinessCenterIcon","createSvgIcon","_jsx","BASE_PATH","listCompanies","query","apiGet","getCompany","id","createCompany","payload","apiPost","updateCompany","apiPatch","deleteCompany","apiDelete","companiesApi","useCallback","useEffect","useMemo","useState","importShared","DEFAULT_QUERY","useCompanies","options","setQueryState","data","setData","loading","setLoading","error","setError","effectiveQuery","execute","params","result","loadCompanies","err","active","updateQuery","patch","prev","setQuery","updater","refetch","RouterLink","useSearchParams","DEFAULT_PAGE_SIZE","formatDate","value","CompaniesListPage","searchParams","setSearchParams","initialQuery","getNumber","key","fallback","getString","companies","syncSearchParams","next","stageFilter","paginationModel","handlePaginationChange","model","nextPage","nextSize","handleSearchChange","event","trimmed","handleRefresh","hasFilters","handleClearFilters","columns","jsxs","Box","jsx","Typography","Chip","viewLink","Button","editLink","newCompanyLink","MainCard","TextField","InputAdornment","SearchIcon","RefreshIcon","Alert","DataGrid","row"],"mappings":"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","x_google_ignoreList":[0]}